// <auto-generated/>
using Askaiser.FusionAuth.Client.Api.Webauthn.Assert;
using Askaiser.FusionAuth.Client.Api.Webauthn.Import;
using Askaiser.FusionAuth.Client.Api.Webauthn.Item;
using Askaiser.FusionAuth.Client.Api.Webauthn.Login;
using Askaiser.FusionAuth.Client.Api.Webauthn.Register;
using Askaiser.FusionAuth.Client.Api.Webauthn.Start;
using Askaiser.FusionAuth.Client.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Askaiser.FusionAuth.Client.Api.Webauthn {
    /// <summary>
    /// Builds and executes requests for operations under \api\webauthn
    /// </summary>
    public class WebauthnRequestBuilder : BaseRequestBuilder {
        /// <summary>The assert property</summary>
        public AssertRequestBuilder Assert { get =>
            new AssertRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The import property</summary>
        public ImportRequestBuilder Import { get =>
            new ImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The login property</summary>
        public LoginRequestBuilder Login { get =>
            new LoginRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The register property</summary>
        public RegisterRequestBuilder Register { get =>
            new RegisterRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The start property</summary>
        public StartRequestBuilder Start { get =>
            new StartRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Askaiser.FusionAuth.Client.api.webauthn.item collection</summary>
        /// <param name="position">The Id of the WebAuthn credential.</param>
        public WebauthnItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("id", position);
            return new WebauthnItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new WebauthnRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebauthnRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/webauthn{?userId*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WebauthnRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebauthnRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/webauthn{?userId*}", rawUrl) {
        }
        /// <summary>
        /// Retrieves all WebAuthn credentials for the given user.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WebAuthnCredentialResponse?> GetAsync(Action<RequestConfiguration<WebauthnRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WebAuthnCredentialResponse> GetAsync(Action<RequestConfiguration<WebauthnRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"4XX", Errors.CreateFromDiscriminatorValue},
                {"5XX", Errors.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<WebAuthnCredentialResponse>(requestInfo, WebAuthnCredentialResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves all WebAuthn credentials for the given user.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<WebauthnRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<WebauthnRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WebauthnRequestBuilder WithUrl(string rawUrl) {
            return new WebauthnRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves all WebAuthn credentials for the given user.
        /// </summary>
        public class WebauthnRequestBuilderGetQueryParameters {
            /// <summary>The user&apos;s ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("userId")]
            public string? UserId { get; set; }
#nullable restore
#else
            [QueryParameter("userId")]
            public string UserId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WebauthnRequestBuilderGetRequestConfiguration : RequestConfiguration<WebauthnRequestBuilderGetQueryParameters> {
        }
    }
}
