// <auto-generated/>
using Askaiser.FusionAuth.Client.Api.User.ActionNamespace;
using Askaiser.FusionAuth.Client.Api.User.Bulk;
using Askaiser.FusionAuth.Client.Api.User.ChangePassword;
using Askaiser.FusionAuth.Client.Api.User.Comment;
using Askaiser.FusionAuth.Client.Api.User.Consent;
using Askaiser.FusionAuth.Client.Api.User.Family;
using Askaiser.FusionAuth.Client.Api.User.ForgotPassword;
using Askaiser.FusionAuth.Client.Api.User.Import;
using Askaiser.FusionAuth.Client.Api.User.Item;
using Askaiser.FusionAuth.Client.Api.User.RecentLogin;
using Askaiser.FusionAuth.Client.Api.User.RefreshToken;
using Askaiser.FusionAuth.Client.Api.User.Registration;
using Askaiser.FusionAuth.Client.Api.User.Search;
using Askaiser.FusionAuth.Client.Api.User.TwoFactor;
using Askaiser.FusionAuth.Client.Api.User.VerifyEmail;
using Askaiser.FusionAuth.Client.Api.User.VerifyRegistration;
using Askaiser.FusionAuth.Client.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Askaiser.FusionAuth.Client.Api.User {
    /// <summary>
    /// Builds and executes requests for operations under \api\user
    /// </summary>
    public class UserRequestBuilder : BaseRequestBuilder {
        /// <summary>The action property</summary>
        public ActionRequestBuilder Action { get =>
            new ActionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bulk property</summary>
        public BulkRequestBuilder Bulk { get =>
            new BulkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changePassword property</summary>
        public ChangePasswordRequestBuilder ChangePassword { get =>
            new ChangePasswordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The comment property</summary>
        public CommentRequestBuilder Comment { get =>
            new CommentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The consent property</summary>
        public ConsentRequestBuilder Consent { get =>
            new ConsentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The family property</summary>
        public FamilyRequestBuilder Family { get =>
            new FamilyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The forgotPassword property</summary>
        public ForgotPasswordRequestBuilder ForgotPassword { get =>
            new ForgotPasswordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The import property</summary>
        public ImportRequestBuilder Import { get =>
            new ImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recentLogin property</summary>
        public RecentLoginRequestBuilder RecentLogin { get =>
            new RecentLoginRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The refreshToken property</summary>
        public RefreshTokenRequestBuilder RefreshToken { get =>
            new RefreshTokenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The registration property</summary>
        public RegistrationRequestBuilder Registration { get =>
            new RegistrationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public SearchRequestBuilder Search { get =>
            new SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The twoFactor property</summary>
        public TwoFactorRequestBuilder TwoFactor { get =>
            new TwoFactorRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The verifyEmail property</summary>
        public VerifyEmailRequestBuilder VerifyEmail { get =>
            new VerifyEmailRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The verifyRegistration property</summary>
        public VerifyRegistrationRequestBuilder VerifyRegistration { get =>
            new VerifyRegistrationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Askaiser.FusionAuth.Client.api.user.item collection</summary>
        /// <param name="position">The Id of the user to reactivate.</param>
        public WithUserItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("userId", position);
            return new WithUserItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new UserRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UserRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/user{?username*,verificationId*,changePasswordId*,email*,loginId*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new UserRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UserRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/user{?username*,verificationId*,changePasswordId*,email*,loginId*}", rawUrl) {
        }
        /// <summary>
        /// Retrieves the user for the given username. OR Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot password workflow has been initiated and you may not know the user&apos;s email or username. OR Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot password workflow has been initiated and you may not know the user&apos;s email or username. OR Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication. OR Retrieves the user for the given email. OR Retrieves the user for the loginId. The loginId can be either the username or the email.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<UserResponse?> GetAsync(Action<RequestConfiguration<UserRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<UserResponse> GetAsync(Action<RequestConfiguration<UserRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"4XX", Errors.CreateFromDiscriminatorValue},
                {"5XX", Errors.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<UserResponse>(requestInfo, UserResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.
        /// </summary>
        /// <param name="body">User API request object.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<UserResponse?> PostAsync(UserRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<UserResponse> PostAsync(UserRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"4XX", Errors.CreateFromDiscriminatorValue},
                {"5XX", Errors.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<UserResponse>(requestInfo, UserResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the user for the given username. OR Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot password workflow has been initiated and you may not know the user&apos;s email or username. OR Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot password workflow has been initiated and you may not know the user&apos;s email or username. OR Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication. OR Retrieves the user for the given email. OR Retrieves the user for the loginId. The loginId can be either the username or the email.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<UserRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<UserRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.
        /// </summary>
        /// <param name="body">User API request object.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(UserRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(UserRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public UserRequestBuilder WithUrl(string rawUrl) {
            return new UserRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves the user for the given username. OR Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot password workflow has been initiated and you may not know the user&apos;s email or username. OR Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot password workflow has been initiated and you may not know the user&apos;s email or username. OR Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication. OR Retrieves the user for the given email. OR Retrieves the user for the loginId. The loginId can be either the username or the email.
        /// </summary>
        public class UserRequestBuilderGetQueryParameters {
            /// <summary>The unique change password Id that was sent via email or returned by the Forgot Password API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("changePasswordId")]
            public string? ChangePasswordId { get; set; }
#nullable restore
#else
            [QueryParameter("changePasswordId")]
            public string ChangePasswordId { get; set; }
#endif
            /// <summary>The email of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("email")]
            public string? Email { get; set; }
#nullable restore
#else
            [QueryParameter("email")]
            public string Email { get; set; }
#endif
            /// <summary>The email or username of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("loginId")]
            public string? LoginId { get; set; }
#nullable restore
#else
            [QueryParameter("loginId")]
            public string LoginId { get; set; }
#endif
            /// <summary>The username of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("username")]
            public string? Username { get; set; }
#nullable restore
#else
            [QueryParameter("username")]
            public string Username { get; set; }
#endif
            /// <summary>The unique verification Id that has been set on the user object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("verificationId")]
            public string? VerificationId { get; set; }
#nullable restore
#else
            [QueryParameter("verificationId")]
            public string VerificationId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class UserRequestBuilderGetRequestConfiguration : RequestConfiguration<UserRequestBuilderGetQueryParameters> {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class UserRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
