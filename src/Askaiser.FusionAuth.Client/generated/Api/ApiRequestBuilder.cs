// <auto-generated/>
using Askaiser.FusionAuth.Client.Api.ApiKey;
using Askaiser.FusionAuth.Client.Api.Application;
using Askaiser.FusionAuth.Client.Api.Connector;
using Askaiser.FusionAuth.Client.Api.Consent;
using Askaiser.FusionAuth.Client.Api.Email;
using Askaiser.FusionAuth.Client.Api.Entity;
using Askaiser.FusionAuth.Client.Api.Form;
using Askaiser.FusionAuth.Client.Api.Group;
using Askaiser.FusionAuth.Client.Api.IdentityProvider;
using Askaiser.FusionAuth.Client.Api.Integration;
using Askaiser.FusionAuth.Client.Api.IpAcl;
using Askaiser.FusionAuth.Client.Api.Jwt;
using Askaiser.FusionAuth.Client.Api.Key;
using Askaiser.FusionAuth.Client.Api.Lambda;
using Askaiser.FusionAuth.Client.Api.Login;
using Askaiser.FusionAuth.Client.Api.Logout;
using Askaiser.FusionAuth.Client.Api.Message;
using Askaiser.FusionAuth.Client.Api.Messenger;
using Askaiser.FusionAuth.Client.Api.Passwordless;
using Askaiser.FusionAuth.Client.Api.Reactor;
using Askaiser.FusionAuth.Client.Api.Report;
using Askaiser.FusionAuth.Client.Api.System;
using Askaiser.FusionAuth.Client.Api.SystemConfiguration;
using Askaiser.FusionAuth.Client.Api.Tenant;
using Askaiser.FusionAuth.Client.Api.Theme;
using Askaiser.FusionAuth.Client.Api.TwoFactor;
using Askaiser.FusionAuth.Client.Api.User;
using Askaiser.FusionAuth.Client.Api.UserAction;
using Askaiser.FusionAuth.Client.Api.UserActionReason;
using Askaiser.FusionAuth.Client.Api.Webauthn;
using Askaiser.FusionAuth.Client.Api.Webhook;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace Askaiser.FusionAuth.Client.Api {
    /// <summary>
    /// Builds and executes requests for operations under \api
    /// </summary>
    public class ApiRequestBuilder : BaseRequestBuilder {
        /// <summary>The apiKey property</summary>
        public ApiKeyRequestBuilder ApiKey { get =>
            new ApiKeyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The application property</summary>
        public ApplicationRequestBuilder Application { get =>
            new ApplicationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The connector property</summary>
        public ConnectorRequestBuilder Connector { get =>
            new ConnectorRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The consent property</summary>
        public ConsentRequestBuilder Consent { get =>
            new ConsentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The email property</summary>
        public EmailRequestBuilder Email { get =>
            new EmailRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The entity property</summary>
        public EntityRequestBuilder Entity { get =>
            new EntityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The form property</summary>
        public FormRequestBuilder Form { get =>
            new FormRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The group property</summary>
        public GroupRequestBuilder Group { get =>
            new GroupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The identityProvider property</summary>
        public IdentityProviderRequestBuilder IdentityProvider { get =>
            new IdentityProviderRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The integration property</summary>
        public IntegrationRequestBuilder Integration { get =>
            new IntegrationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ipAcl property</summary>
        public IpAclRequestBuilder IpAcl { get =>
            new IpAclRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jwt property</summary>
        public JwtRequestBuilder Jwt { get =>
            new JwtRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The key property</summary>
        public KeyRequestBuilder Key { get =>
            new KeyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lambda property</summary>
        public LambdaRequestBuilder Lambda { get =>
            new LambdaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The login property</summary>
        public LoginRequestBuilder Login { get =>
            new LoginRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logout property</summary>
        public LogoutRequestBuilder Logout { get =>
            new LogoutRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The message property</summary>
        public MessageRequestBuilder Message { get =>
            new MessageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The messenger property</summary>
        public MessengerRequestBuilder Messenger { get =>
            new MessengerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The passwordless property</summary>
        public PasswordlessRequestBuilder Passwordless { get =>
            new PasswordlessRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The reactor property</summary>
        public ReactorRequestBuilder Reactor { get =>
            new ReactorRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The report property</summary>
        public ReportRequestBuilder Report { get =>
            new ReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The system property</summary>
        public SystemRequestBuilder System { get =>
            new SystemRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The systemConfiguration property</summary>
        public SystemConfigurationRequestBuilder SystemConfiguration { get =>
            new SystemConfigurationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tenant property</summary>
        public TenantRequestBuilder Tenant { get =>
            new TenantRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The theme property</summary>
        public ThemeRequestBuilder Theme { get =>
            new ThemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The twoFactor property</summary>
        public TwoFactorRequestBuilder TwoFactor { get =>
            new TwoFactorRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The user property</summary>
        public UserRequestBuilder User { get =>
            new UserRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The userAction property</summary>
        public UserActionRequestBuilder UserAction { get =>
            new UserActionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The userActionReason property</summary>
        public UserActionReasonRequestBuilder UserActionReason { get =>
            new UserActionReasonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webauthn property</summary>
        public WebauthnRequestBuilder Webauthn { get =>
            new WebauthnRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webhook property</summary>
        public WebhookRequestBuilder Webhook { get =>
            new WebhookRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new ApiRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new ApiRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api", rawUrl) {
        }
    }
}
