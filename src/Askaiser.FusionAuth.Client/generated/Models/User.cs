// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// The global view of a User. This object contains all global information about the user including birth date, registration information  preferred languages, global attributes, etc.
    /// </summary>
    public class User : IParsable {
        /// <summary>The active property</summary>
        public bool? Active { get; set; }
        /// <summary>A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BirthDate { get; set; }
#nullable restore
#else
        public string BirthDate { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? BreachedPasswordLastCheckedInstant { get; set; }
        /// <summary>The breachedPasswordStatus property</summary>
        public Askaiser.FusionAuth.Client.Models.BreachedPasswordStatus? BreachedPasswordStatus { get; set; }
        /// <summary>The cleanSpeakId property</summary>
        public Guid? CleanSpeakId { get; set; }
        /// <summary>The connectorId property</summary>
        public Guid? ConnectorId { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User_data? Data { get; set; }
#nullable restore
#else
        public User_data Data { get; set; }
#endif
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The encryptionScheme property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EncryptionScheme { get; set; }
#nullable restore
#else
        public string EncryptionScheme { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? Expiry { get; set; }
        /// <summary>The factor property</summary>
        public int? Factor { get; set; }
        /// <summary>The firstName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The fullName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The imageUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? InsertInstant { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? LastLoginInstant { get; set; }
        /// <summary>The lastName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? LastUpdateInstant { get; set; }
        /// <summary>The memberships property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<GroupMember>? Memberships { get; set; }
#nullable restore
#else
        public List<GroupMember> Memberships { get; set; }
#endif
        /// <summary>The middleName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MiddleName { get; set; }
#nullable restore
#else
        public string MiddleName { get; set; }
#endif
        /// <summary>The mobilePhone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone { get; set; }
#nullable restore
#else
        public string MobilePhone { get; set; }
#endif
        /// <summary>The parentEmail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentEmail { get; set; }
#nullable restore
#else
        public string ParentEmail { get; set; }
#endif
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The passwordChangeReason property</summary>
        public ChangePasswordReason? PasswordChangeReason { get; set; }
        /// <summary>The passwordChangeRequired property</summary>
        public bool? PasswordChangeRequired { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? PasswordLastUpdateInstant { get; set; }
        /// <summary>The preferredLanguages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PreferredLanguages { get; set; }
#nullable restore
#else
        public List<string> PreferredLanguages { get; set; }
#endif
        /// <summary>The registrations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<UserRegistration>? Registrations { get; set; }
#nullable restore
#else
        public List<UserRegistration> Registrations { get; set; }
#endif
        /// <summary>The salt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Salt { get; set; }
#nullable restore
#else
        public string Salt { get; set; }
#endif
        /// <summary>The tenantId property</summary>
        public Guid? TenantId { get; set; }
        /// <summary>Timezone Identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>The twoFactor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserTwoFactorConfiguration? TwoFactor { get; set; }
#nullable restore
#else
        public UserTwoFactorConfiguration TwoFactor { get; set; }
#endif
        /// <summary>The uniqueUsername property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueUsername { get; set; }
#nullable restore
#else
        public string UniqueUsername { get; set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>Status for content like usernames, profile attributes, etc.</summary>
        public ContentStatus? UsernameStatus { get; set; }
        /// <summary>The verified property</summary>
        public bool? Verified { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? VerifiedInstant { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static User CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new User();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"active", n => { Active = n.GetBoolValue(); } },
                {"birthDate", n => { BirthDate = n.GetStringValue(); } },
                {"breachedPasswordLastCheckedInstant", n => { BreachedPasswordLastCheckedInstant = n.GetLongValue(); } },
                {"breachedPasswordStatus", n => { BreachedPasswordStatus = n.GetEnumValue<BreachedPasswordStatus>(); } },
                {"cleanSpeakId", n => { CleanSpeakId = n.GetGuidValue(); } },
                {"connectorId", n => { ConnectorId = n.GetGuidValue(); } },
                {"data", n => { Data = n.GetObjectValue<User_data>(User_data.CreateFromDiscriminatorValue); } },
                {"email", n => { Email = n.GetStringValue(); } },
                {"encryptionScheme", n => { EncryptionScheme = n.GetStringValue(); } },
                {"expiry", n => { Expiry = n.GetLongValue(); } },
                {"factor", n => { Factor = n.GetIntValue(); } },
                {"firstName", n => { FirstName = n.GetStringValue(); } },
                {"fullName", n => { FullName = n.GetStringValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                {"insertInstant", n => { InsertInstant = n.GetLongValue(); } },
                {"lastLoginInstant", n => { LastLoginInstant = n.GetLongValue(); } },
                {"lastName", n => { LastName = n.GetStringValue(); } },
                {"lastUpdateInstant", n => { LastUpdateInstant = n.GetLongValue(); } },
                {"memberships", n => { Memberships = n.GetCollectionOfObjectValues<GroupMember>(GroupMember.CreateFromDiscriminatorValue)?.ToList(); } },
                {"middleName", n => { MiddleName = n.GetStringValue(); } },
                {"mobilePhone", n => { MobilePhone = n.GetStringValue(); } },
                {"parentEmail", n => { ParentEmail = n.GetStringValue(); } },
                {"password", n => { Password = n.GetStringValue(); } },
                {"passwordChangeReason", n => { PasswordChangeReason = n.GetEnumValue<ChangePasswordReason>(); } },
                {"passwordChangeRequired", n => { PasswordChangeRequired = n.GetBoolValue(); } },
                {"passwordLastUpdateInstant", n => { PasswordLastUpdateInstant = n.GetLongValue(); } },
                {"preferredLanguages", n => { PreferredLanguages = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"registrations", n => { Registrations = n.GetCollectionOfObjectValues<UserRegistration>(UserRegistration.CreateFromDiscriminatorValue)?.ToList(); } },
                {"salt", n => { Salt = n.GetStringValue(); } },
                {"tenantId", n => { TenantId = n.GetGuidValue(); } },
                {"timezone", n => { Timezone = n.GetStringValue(); } },
                {"twoFactor", n => { TwoFactor = n.GetObjectValue<UserTwoFactorConfiguration>(UserTwoFactorConfiguration.CreateFromDiscriminatorValue); } },
                {"uniqueUsername", n => { UniqueUsername = n.GetStringValue(); } },
                {"username", n => { Username = n.GetStringValue(); } },
                {"usernameStatus", n => { UsernameStatus = n.GetEnumValue<ContentStatus>(); } },
                {"verified", n => { Verified = n.GetBoolValue(); } },
                {"verifiedInstant", n => { VerifiedInstant = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteStringValue("birthDate", BirthDate);
            writer.WriteLongValue("breachedPasswordLastCheckedInstant", BreachedPasswordLastCheckedInstant);
            writer.WriteEnumValue<BreachedPasswordStatus>("breachedPasswordStatus", BreachedPasswordStatus);
            writer.WriteGuidValue("cleanSpeakId", CleanSpeakId);
            writer.WriteGuidValue("connectorId", ConnectorId);
            writer.WriteObjectValue<User_data>("data", Data);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("encryptionScheme", EncryptionScheme);
            writer.WriteLongValue("expiry", Expiry);
            writer.WriteIntValue("factor", Factor);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteStringValue("fullName", FullName);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("imageUrl", ImageUrl);
            writer.WriteLongValue("insertInstant", InsertInstant);
            writer.WriteLongValue("lastLoginInstant", LastLoginInstant);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteLongValue("lastUpdateInstant", LastUpdateInstant);
            writer.WriteCollectionOfObjectValues<GroupMember>("memberships", Memberships);
            writer.WriteStringValue("middleName", MiddleName);
            writer.WriteStringValue("mobilePhone", MobilePhone);
            writer.WriteStringValue("parentEmail", ParentEmail);
            writer.WriteStringValue("password", Password);
            writer.WriteEnumValue<ChangePasswordReason>("passwordChangeReason", PasswordChangeReason);
            writer.WriteBoolValue("passwordChangeRequired", PasswordChangeRequired);
            writer.WriteLongValue("passwordLastUpdateInstant", PasswordLastUpdateInstant);
            writer.WriteCollectionOfPrimitiveValues<string>("preferredLanguages", PreferredLanguages);
            writer.WriteCollectionOfObjectValues<UserRegistration>("registrations", Registrations);
            writer.WriteStringValue("salt", Salt);
            writer.WriteGuidValue("tenantId", TenantId);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteObjectValue<UserTwoFactorConfiguration>("twoFactor", TwoFactor);
            writer.WriteStringValue("uniqueUsername", UniqueUsername);
            writer.WriteStringValue("username", Username);
            writer.WriteEnumValue<ContentStatus>("usernameStatus", UsernameStatus);
            writer.WriteBoolValue("verified", Verified);
            writer.WriteLongValue("verifiedInstant", VerifiedInstant);
        }
    }
}
