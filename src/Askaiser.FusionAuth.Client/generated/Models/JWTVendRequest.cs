// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class JWTVendRequest : IParsable {
        /// <summary>The claims property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JWTVendRequest_claims? Claims { get; set; }
#nullable restore
#else
        public JWTVendRequest_claims Claims { get; set; }
#endif
        /// <summary>The keyId property</summary>
        public Guid? KeyId { get; set; }
        /// <summary>The timeToLiveInSeconds property</summary>
        public int? TimeToLiveInSeconds { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JWTVendRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JWTVendRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"claims", n => { Claims = n.GetObjectValue<JWTVendRequest_claims>(JWTVendRequest_claims.CreateFromDiscriminatorValue); } },
                {"keyId", n => { KeyId = n.GetGuidValue(); } },
                {"timeToLiveInSeconds", n => { TimeToLiveInSeconds = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<JWTVendRequest_claims>("claims", Claims);
            writer.WriteGuidValue("keyId", KeyId);
            writer.WriteIntValue("timeToLiveInSeconds", TimeToLiveInSeconds);
        }
    }
}
