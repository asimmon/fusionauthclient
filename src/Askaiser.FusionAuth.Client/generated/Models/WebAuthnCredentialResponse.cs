// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// WebAuthn Credential API response
    /// </summary>
    public class WebAuthnCredentialResponse : IParsable {
        /// <summary>A User&apos;s WebAuthnCredential. Contains all data required to complete WebAuthn authentication ceremonies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WebAuthnCredential? Credential { get; set; }
#nullable restore
#else
        public WebAuthnCredential Credential { get; set; }
#endif
        /// <summary>The credentials property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WebAuthnCredential>? Credentials { get; set; }
#nullable restore
#else
        public List<WebAuthnCredential> Credentials { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WebAuthnCredentialResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WebAuthnCredentialResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"credential", n => { Credential = n.GetObjectValue<WebAuthnCredential>(WebAuthnCredential.CreateFromDiscriminatorValue); } },
                {"credentials", n => { Credentials = n.GetCollectionOfObjectValues<WebAuthnCredential>(WebAuthnCredential.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<WebAuthnCredential>("credential", Credential);
            writer.WriteCollectionOfObjectValues<WebAuthnCredential>("credentials", Credentials);
        }
    }
}
