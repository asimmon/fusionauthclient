// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class ExternalIdentifierConfiguration : IParsable {
        /// <summary>The authorizationGrantIdTimeToLiveInSeconds property</summary>
        public int? AuthorizationGrantIdTimeToLiveInSeconds { get; set; }
        /// <summary>The changePasswordIdGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? ChangePasswordIdGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration ChangePasswordIdGenerator { get; set; }
#endif
        /// <summary>The changePasswordIdTimeToLiveInSeconds property</summary>
        public int? ChangePasswordIdTimeToLiveInSeconds { get; set; }
        /// <summary>The deviceCodeTimeToLiveInSeconds property</summary>
        public int? DeviceCodeTimeToLiveInSeconds { get; set; }
        /// <summary>The deviceUserCodeIdGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? DeviceUserCodeIdGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration DeviceUserCodeIdGenerator { get; set; }
#endif
        /// <summary>The emailVerificationIdGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? EmailVerificationIdGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration EmailVerificationIdGenerator { get; set; }
#endif
        /// <summary>The emailVerificationIdTimeToLiveInSeconds property</summary>
        public int? EmailVerificationIdTimeToLiveInSeconds { get; set; }
        /// <summary>The emailVerificationOneTimeCodeGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? EmailVerificationOneTimeCodeGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration EmailVerificationOneTimeCodeGenerator { get; set; }
#endif
        /// <summary>The externalAuthenticationIdTimeToLiveInSeconds property</summary>
        public int? ExternalAuthenticationIdTimeToLiveInSeconds { get; set; }
        /// <summary>The oneTimePasswordTimeToLiveInSeconds property</summary>
        public int? OneTimePasswordTimeToLiveInSeconds { get; set; }
        /// <summary>The passwordlessLoginGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? PasswordlessLoginGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration PasswordlessLoginGenerator { get; set; }
#endif
        /// <summary>The passwordlessLoginTimeToLiveInSeconds property</summary>
        public int? PasswordlessLoginTimeToLiveInSeconds { get; set; }
        /// <summary>The pendingAccountLinkTimeToLiveInSeconds property</summary>
        public int? PendingAccountLinkTimeToLiveInSeconds { get; set; }
        /// <summary>The registrationVerificationIdGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? RegistrationVerificationIdGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration RegistrationVerificationIdGenerator { get; set; }
#endif
        /// <summary>The registrationVerificationIdTimeToLiveInSeconds property</summary>
        public int? RegistrationVerificationIdTimeToLiveInSeconds { get; set; }
        /// <summary>The registrationVerificationOneTimeCodeGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? RegistrationVerificationOneTimeCodeGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration RegistrationVerificationOneTimeCodeGenerator { get; set; }
#endif
        /// <summary>The samlv2AuthNRequestIdTimeToLiveInSeconds property</summary>
        public int? Samlv2AuthNRequestIdTimeToLiveInSeconds { get; set; }
        /// <summary>The setupPasswordIdGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? SetupPasswordIdGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration SetupPasswordIdGenerator { get; set; }
#endif
        /// <summary>The setupPasswordIdTimeToLiveInSeconds property</summary>
        public int? SetupPasswordIdTimeToLiveInSeconds { get; set; }
        /// <summary>The trustTokenTimeToLiveInSeconds property</summary>
        public int? TrustTokenTimeToLiveInSeconds { get; set; }
        /// <summary>The twoFactorIdTimeToLiveInSeconds property</summary>
        public int? TwoFactorIdTimeToLiveInSeconds { get; set; }
        /// <summary>The twoFactorOneTimeCodeIdGenerator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecureGeneratorConfiguration? TwoFactorOneTimeCodeIdGenerator { get; set; }
#nullable restore
#else
        public SecureGeneratorConfiguration TwoFactorOneTimeCodeIdGenerator { get; set; }
#endif
        /// <summary>The twoFactorOneTimeCodeIdTimeToLiveInSeconds property</summary>
        public int? TwoFactorOneTimeCodeIdTimeToLiveInSeconds { get; set; }
        /// <summary>The twoFactorTrustIdTimeToLiveInSeconds property</summary>
        public int? TwoFactorTrustIdTimeToLiveInSeconds { get; set; }
        /// <summary>The webAuthnAuthenticationChallengeTimeToLiveInSeconds property</summary>
        public int? WebAuthnAuthenticationChallengeTimeToLiveInSeconds { get; set; }
        /// <summary>The webAuthnRegistrationChallengeTimeToLiveInSeconds property</summary>
        public int? WebAuthnRegistrationChallengeTimeToLiveInSeconds { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ExternalIdentifierConfiguration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ExternalIdentifierConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"authorizationGrantIdTimeToLiveInSeconds", n => { AuthorizationGrantIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"changePasswordIdGenerator", n => { ChangePasswordIdGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"changePasswordIdTimeToLiveInSeconds", n => { ChangePasswordIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"deviceCodeTimeToLiveInSeconds", n => { DeviceCodeTimeToLiveInSeconds = n.GetIntValue(); } },
                {"deviceUserCodeIdGenerator", n => { DeviceUserCodeIdGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"emailVerificationIdGenerator", n => { EmailVerificationIdGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"emailVerificationIdTimeToLiveInSeconds", n => { EmailVerificationIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"emailVerificationOneTimeCodeGenerator", n => { EmailVerificationOneTimeCodeGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"externalAuthenticationIdTimeToLiveInSeconds", n => { ExternalAuthenticationIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"oneTimePasswordTimeToLiveInSeconds", n => { OneTimePasswordTimeToLiveInSeconds = n.GetIntValue(); } },
                {"passwordlessLoginGenerator", n => { PasswordlessLoginGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"passwordlessLoginTimeToLiveInSeconds", n => { PasswordlessLoginTimeToLiveInSeconds = n.GetIntValue(); } },
                {"pendingAccountLinkTimeToLiveInSeconds", n => { PendingAccountLinkTimeToLiveInSeconds = n.GetIntValue(); } },
                {"registrationVerificationIdGenerator", n => { RegistrationVerificationIdGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"registrationVerificationIdTimeToLiveInSeconds", n => { RegistrationVerificationIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"registrationVerificationOneTimeCodeGenerator", n => { RegistrationVerificationOneTimeCodeGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"samlv2AuthNRequestIdTimeToLiveInSeconds", n => { Samlv2AuthNRequestIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"setupPasswordIdGenerator", n => { SetupPasswordIdGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"setupPasswordIdTimeToLiveInSeconds", n => { SetupPasswordIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"trustTokenTimeToLiveInSeconds", n => { TrustTokenTimeToLiveInSeconds = n.GetIntValue(); } },
                {"twoFactorIdTimeToLiveInSeconds", n => { TwoFactorIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"twoFactorOneTimeCodeIdGenerator", n => { TwoFactorOneTimeCodeIdGenerator = n.GetObjectValue<SecureGeneratorConfiguration>(SecureGeneratorConfiguration.CreateFromDiscriminatorValue); } },
                {"twoFactorOneTimeCodeIdTimeToLiveInSeconds", n => { TwoFactorOneTimeCodeIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"twoFactorTrustIdTimeToLiveInSeconds", n => { TwoFactorTrustIdTimeToLiveInSeconds = n.GetIntValue(); } },
                {"webAuthnAuthenticationChallengeTimeToLiveInSeconds", n => { WebAuthnAuthenticationChallengeTimeToLiveInSeconds = n.GetIntValue(); } },
                {"webAuthnRegistrationChallengeTimeToLiveInSeconds", n => { WebAuthnRegistrationChallengeTimeToLiveInSeconds = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("authorizationGrantIdTimeToLiveInSeconds", AuthorizationGrantIdTimeToLiveInSeconds);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("changePasswordIdGenerator", ChangePasswordIdGenerator);
            writer.WriteIntValue("changePasswordIdTimeToLiveInSeconds", ChangePasswordIdTimeToLiveInSeconds);
            writer.WriteIntValue("deviceCodeTimeToLiveInSeconds", DeviceCodeTimeToLiveInSeconds);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("deviceUserCodeIdGenerator", DeviceUserCodeIdGenerator);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("emailVerificationIdGenerator", EmailVerificationIdGenerator);
            writer.WriteIntValue("emailVerificationIdTimeToLiveInSeconds", EmailVerificationIdTimeToLiveInSeconds);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("emailVerificationOneTimeCodeGenerator", EmailVerificationOneTimeCodeGenerator);
            writer.WriteIntValue("externalAuthenticationIdTimeToLiveInSeconds", ExternalAuthenticationIdTimeToLiveInSeconds);
            writer.WriteIntValue("oneTimePasswordTimeToLiveInSeconds", OneTimePasswordTimeToLiveInSeconds);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("passwordlessLoginGenerator", PasswordlessLoginGenerator);
            writer.WriteIntValue("passwordlessLoginTimeToLiveInSeconds", PasswordlessLoginTimeToLiveInSeconds);
            writer.WriteIntValue("pendingAccountLinkTimeToLiveInSeconds", PendingAccountLinkTimeToLiveInSeconds);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("registrationVerificationIdGenerator", RegistrationVerificationIdGenerator);
            writer.WriteIntValue("registrationVerificationIdTimeToLiveInSeconds", RegistrationVerificationIdTimeToLiveInSeconds);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("registrationVerificationOneTimeCodeGenerator", RegistrationVerificationOneTimeCodeGenerator);
            writer.WriteIntValue("samlv2AuthNRequestIdTimeToLiveInSeconds", Samlv2AuthNRequestIdTimeToLiveInSeconds);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("setupPasswordIdGenerator", SetupPasswordIdGenerator);
            writer.WriteIntValue("setupPasswordIdTimeToLiveInSeconds", SetupPasswordIdTimeToLiveInSeconds);
            writer.WriteIntValue("trustTokenTimeToLiveInSeconds", TrustTokenTimeToLiveInSeconds);
            writer.WriteIntValue("twoFactorIdTimeToLiveInSeconds", TwoFactorIdTimeToLiveInSeconds);
            writer.WriteObjectValue<SecureGeneratorConfiguration>("twoFactorOneTimeCodeIdGenerator", TwoFactorOneTimeCodeIdGenerator);
            writer.WriteIntValue("twoFactorOneTimeCodeIdTimeToLiveInSeconds", TwoFactorOneTimeCodeIdTimeToLiveInSeconds);
            writer.WriteIntValue("twoFactorTrustIdTimeToLiveInSeconds", TwoFactorTrustIdTimeToLiveInSeconds);
            writer.WriteIntValue("webAuthnAuthenticationChallengeTimeToLiveInSeconds", WebAuthnAuthenticationChallengeTimeToLiveInSeconds);
            writer.WriteIntValue("webAuthnRegistrationChallengeTimeToLiveInSeconds", WebAuthnRegistrationChallengeTimeToLiveInSeconds);
        }
    }
}
