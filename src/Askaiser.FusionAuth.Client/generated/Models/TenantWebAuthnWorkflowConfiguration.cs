// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class TenantWebAuthnWorkflowConfiguration : IParsable {
        /// <summary>Describes the authenticator attachment modality preference for a WebAuthn workflow. See {@link AuthenticatorAttachment}</summary>
        public Askaiser.FusionAuth.Client.Models.AuthenticatorAttachmentPreference? AuthenticatorAttachmentPreference { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>Used to express whether the Relying Party requires &lt;a href=&quot;https:www.w3.orgTRwebauthn-2#user-verification&quot;&gt;user verification&lt;a&gt; for the  current operation.</summary>
        public Askaiser.FusionAuth.Client.Models.UserVerificationRequirement? UserVerificationRequirement { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TenantWebAuthnWorkflowConfiguration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TenantWebAuthnWorkflowConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"authenticatorAttachmentPreference", n => { AuthenticatorAttachmentPreference = n.GetEnumValue<AuthenticatorAttachmentPreference>(); } },
                {"enabled", n => { Enabled = n.GetBoolValue(); } },
                {"userVerificationRequirement", n => { UserVerificationRequirement = n.GetEnumValue<UserVerificationRequirement>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<AuthenticatorAttachmentPreference>("authenticatorAttachmentPreference", AuthenticatorAttachmentPreference);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteEnumValue<UserVerificationRequirement>("userVerificationRequirement", UserVerificationRequirement);
        }
    }
}
