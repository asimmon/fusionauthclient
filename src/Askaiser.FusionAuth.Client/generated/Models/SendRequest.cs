// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class SendRequest : IParsable {
        /// <summary>The applicationId property</summary>
        public Guid? ApplicationId { get; set; }
        /// <summary>The bccAddresses property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BccAddresses { get; set; }
#nullable restore
#else
        public List<string> BccAddresses { get; set; }
#endif
        /// <summary>The ccAddresses property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CcAddresses { get; set; }
#nullable restore
#else
        public List<string> CcAddresses { get; set; }
#endif
        /// <summary>The preferredLanguages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PreferredLanguages { get; set; }
#nullable restore
#else
        public List<string> PreferredLanguages { get; set; }
#endif
        /// <summary>The requestData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SendRequest_requestData? RequestData { get; set; }
#nullable restore
#else
        public SendRequest_requestData RequestData { get; set; }
#endif
        /// <summary>The toAddresses property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<EmailAddress>? ToAddresses { get; set; }
#nullable restore
#else
        public List<EmailAddress> ToAddresses { get; set; }
#endif
        /// <summary>The userIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? UserIds { get; set; }
#nullable restore
#else
        public List<Guid?> UserIds { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SendRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SendRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"applicationId", n => { ApplicationId = n.GetGuidValue(); } },
                {"bccAddresses", n => { BccAddresses = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"ccAddresses", n => { CcAddresses = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"preferredLanguages", n => { PreferredLanguages = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"requestData", n => { RequestData = n.GetObjectValue<SendRequest_requestData>(SendRequest_requestData.CreateFromDiscriminatorValue); } },
                {"toAddresses", n => { ToAddresses = n.GetCollectionOfObjectValues<EmailAddress>(EmailAddress.CreateFromDiscriminatorValue)?.ToList(); } },
                {"userIds", n => { UserIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("applicationId", ApplicationId);
            writer.WriteCollectionOfPrimitiveValues<string>("bccAddresses", BccAddresses);
            writer.WriteCollectionOfPrimitiveValues<string>("ccAddresses", CcAddresses);
            writer.WriteCollectionOfPrimitiveValues<string>("preferredLanguages", PreferredLanguages);
            writer.WriteObjectValue<SendRequest_requestData>("requestData", RequestData);
            writer.WriteCollectionOfObjectValues<EmailAddress>("toAddresses", ToAddresses);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("userIds", UserIds);
        }
    }
}
