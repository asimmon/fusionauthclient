// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class RegistrationConfiguration : IParsable {
        /// <summary>Something that can be required and thus also optional. This currently extends Enableable because anything that is  requireoptional is almost always enableable as well.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Requirable? BirthDate { get; set; }
#nullable restore
#else
        public Requirable BirthDate { get; set; }
#endif
        /// <summary>The confirmPassword property</summary>
        public bool? ConfirmPassword { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>Something that can be required and thus also optional. This currently extends Enableable because anything that is  requireoptional is almost always enableable as well.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Requirable? FirstName { get; set; }
#nullable restore
#else
        public Requirable FirstName { get; set; }
#endif
        /// <summary>The formId property</summary>
        public Guid? FormId { get; set; }
        /// <summary>Something that can be required and thus also optional. This currently extends Enableable because anything that is  requireoptional is almost always enableable as well.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Requirable? FullName { get; set; }
#nullable restore
#else
        public Requirable FullName { get; set; }
#endif
        /// <summary>Something that can be required and thus also optional. This currently extends Enableable because anything that is  requireoptional is almost always enableable as well.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Requirable? LastName { get; set; }
#nullable restore
#else
        public Requirable LastName { get; set; }
#endif
        /// <summary>The loginIdType property</summary>
        public Askaiser.FusionAuth.Client.Models.LoginIdType? LoginIdType { get; set; }
        /// <summary>Something that can be required and thus also optional. This currently extends Enableable because anything that is  requireoptional is almost always enableable as well.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Requirable? MiddleName { get; set; }
#nullable restore
#else
        public Requirable MiddleName { get; set; }
#endif
        /// <summary>Something that can be required and thus also optional. This currently extends Enableable because anything that is  requireoptional is almost always enableable as well.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Requirable? MobilePhone { get; set; }
#nullable restore
#else
        public Requirable MobilePhone { get; set; }
#endif
        /// <summary>Something that can be required and thus also optional. This currently extends Enableable because anything that is  requireoptional is almost always enableable as well.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Requirable? PreferredLanguages { get; set; }
#nullable restore
#else
        public Requirable PreferredLanguages { get; set; }
#endif
        /// <summary>The type property</summary>
        public RegistrationType? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RegistrationConfiguration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RegistrationConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"birthDate", n => { BirthDate = n.GetObjectValue<Requirable>(Requirable.CreateFromDiscriminatorValue); } },
                {"confirmPassword", n => { ConfirmPassword = n.GetBoolValue(); } },
                {"enabled", n => { Enabled = n.GetBoolValue(); } },
                {"firstName", n => { FirstName = n.GetObjectValue<Requirable>(Requirable.CreateFromDiscriminatorValue); } },
                {"formId", n => { FormId = n.GetGuidValue(); } },
                {"fullName", n => { FullName = n.GetObjectValue<Requirable>(Requirable.CreateFromDiscriminatorValue); } },
                {"lastName", n => { LastName = n.GetObjectValue<Requirable>(Requirable.CreateFromDiscriminatorValue); } },
                {"loginIdType", n => { LoginIdType = n.GetEnumValue<LoginIdType>(); } },
                {"middleName", n => { MiddleName = n.GetObjectValue<Requirable>(Requirable.CreateFromDiscriminatorValue); } },
                {"mobilePhone", n => { MobilePhone = n.GetObjectValue<Requirable>(Requirable.CreateFromDiscriminatorValue); } },
                {"preferredLanguages", n => { PreferredLanguages = n.GetObjectValue<Requirable>(Requirable.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<RegistrationType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Requirable>("birthDate", BirthDate);
            writer.WriteBoolValue("confirmPassword", ConfirmPassword);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<Requirable>("firstName", FirstName);
            writer.WriteGuidValue("formId", FormId);
            writer.WriteObjectValue<Requirable>("fullName", FullName);
            writer.WriteObjectValue<Requirable>("lastName", LastName);
            writer.WriteEnumValue<LoginIdType>("loginIdType", LoginIdType);
            writer.WriteObjectValue<Requirable>("middleName", MiddleName);
            writer.WriteObjectValue<Requirable>("mobilePhone", MobilePhone);
            writer.WriteObjectValue<Requirable>("preferredLanguages", PreferredLanguages);
            writer.WriteEnumValue<RegistrationType>("type", Type);
        }
    }
}
