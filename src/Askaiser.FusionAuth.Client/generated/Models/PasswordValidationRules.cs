// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class PasswordValidationRules : IParsable {
        /// <summary>The breachDetection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PasswordBreachDetection? BreachDetection { get; set; }
#nullable restore
#else
        public PasswordBreachDetection BreachDetection { get; set; }
#endif
        /// <summary>The maxLength property</summary>
        public int? MaxLength { get; set; }
        /// <summary>The minLength property</summary>
        public int? MinLength { get; set; }
        /// <summary>The rememberPreviousPasswords property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Askaiser.FusionAuth.Client.Models.RememberPreviousPasswords? RememberPreviousPasswords { get; set; }
#nullable restore
#else
        public Askaiser.FusionAuth.Client.Models.RememberPreviousPasswords RememberPreviousPasswords { get; set; }
#endif
        /// <summary>The requireMixedCase property</summary>
        public bool? RequireMixedCase { get; set; }
        /// <summary>The requireNonAlpha property</summary>
        public bool? RequireNonAlpha { get; set; }
        /// <summary>The requireNumber property</summary>
        public bool? RequireNumber { get; set; }
        /// <summary>The validateOnLogin property</summary>
        public bool? ValidateOnLogin { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PasswordValidationRules CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PasswordValidationRules();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"breachDetection", n => { BreachDetection = n.GetObjectValue<PasswordBreachDetection>(PasswordBreachDetection.CreateFromDiscriminatorValue); } },
                {"maxLength", n => { MaxLength = n.GetIntValue(); } },
                {"minLength", n => { MinLength = n.GetIntValue(); } },
                {"rememberPreviousPasswords", n => { RememberPreviousPasswords = n.GetObjectValue<Askaiser.FusionAuth.Client.Models.RememberPreviousPasswords>(Askaiser.FusionAuth.Client.Models.RememberPreviousPasswords.CreateFromDiscriminatorValue); } },
                {"requireMixedCase", n => { RequireMixedCase = n.GetBoolValue(); } },
                {"requireNonAlpha", n => { RequireNonAlpha = n.GetBoolValue(); } },
                {"requireNumber", n => { RequireNumber = n.GetBoolValue(); } },
                {"validateOnLogin", n => { ValidateOnLogin = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<PasswordBreachDetection>("breachDetection", BreachDetection);
            writer.WriteIntValue("maxLength", MaxLength);
            writer.WriteIntValue("minLength", MinLength);
            writer.WriteObjectValue<Askaiser.FusionAuth.Client.Models.RememberPreviousPasswords>("rememberPreviousPasswords", RememberPreviousPasswords);
            writer.WriteBoolValue("requireMixedCase", RequireMixedCase);
            writer.WriteBoolValue("requireNonAlpha", RequireNonAlpha);
            writer.WriteBoolValue("requireNumber", RequireNumber);
            writer.WriteBoolValue("validateOnLogin", ValidateOnLogin);
        }
    }
}
