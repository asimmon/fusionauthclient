// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// SAML v2 identity provider configuration.
    /// </summary>
    public class SAMLv2IdentityProvider : IParsable {
        /// <summary>The assertionConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SAMLv2AssertionConfiguration? AssertionConfiguration { get; set; }
#nullable restore
#else
        public SAMLv2AssertionConfiguration AssertionConfiguration { get; set; }
#endif
        /// <summary>The buttonImageURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ButtonImageURL { get; set; }
#nullable restore
#else
        public string ButtonImageURL { get; set; }
#endif
        /// <summary>The buttonText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ButtonText { get; set; }
#nullable restore
#else
        public string ButtonText { get; set; }
#endif
        /// <summary>The emailClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailClaim { get; set; }
#nullable restore
#else
        public string EmailClaim { get; set; }
#endif
        /// <summary>The idpEndpoint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdpEndpoint { get; set; }
#nullable restore
#else
        public string IdpEndpoint { get; set; }
#endif
        /// <summary>Config for regular SAML IDP configurations that support IdP initiated requests</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SAMLv2IdpInitiatedConfiguration? IdpInitiatedConfiguration { get; set; }
#nullable restore
#else
        public SAMLv2IdpInitiatedConfiguration IdpInitiatedConfiguration { get; set; }
#endif
        /// <summary>The issuer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>The keyId property</summary>
        public Guid? KeyId { get; set; }
        /// <summary>The loginHintConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Askaiser.FusionAuth.Client.Models.LoginHintConfiguration? LoginHintConfiguration { get; set; }
#nullable restore
#else
        public Askaiser.FusionAuth.Client.Models.LoginHintConfiguration LoginHintConfiguration { get; set; }
#endif
        /// <summary>The nameIdFormat property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameIdFormat { get; set; }
#nullable restore
#else
        public string NameIdFormat { get; set; }
#endif
        /// <summary>The postRequest property</summary>
        public bool? PostRequest { get; set; }
        /// <summary>The requestSigningKeyId property</summary>
        public Guid? RequestSigningKeyId { get; set; }
        /// <summary>The signRequest property</summary>
        public bool? SignRequest { get; set; }
        /// <summary>The uniqueIdClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueIdClaim { get; set; }
#nullable restore
#else
        public string UniqueIdClaim { get; set; }
#endif
        /// <summary>The useNameIdForEmail property</summary>
        public bool? UseNameIdForEmail { get; set; }
        /// <summary>The usernameClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsernameClaim { get; set; }
#nullable restore
#else
        public string UsernameClaim { get; set; }
#endif
        /// <summary>XML canonicalization method enumeration. This is used for the IdP and SP side of FusionAuth SAML.</summary>
        public CanonicalizationMethod? XmlSignatureC14nMethod { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SAMLv2IdentityProvider CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SAMLv2IdentityProvider();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"assertionConfiguration", n => { AssertionConfiguration = n.GetObjectValue<SAMLv2AssertionConfiguration>(SAMLv2AssertionConfiguration.CreateFromDiscriminatorValue); } },
                {"buttonImageURL", n => { ButtonImageURL = n.GetStringValue(); } },
                {"buttonText", n => { ButtonText = n.GetStringValue(); } },
                {"emailClaim", n => { EmailClaim = n.GetStringValue(); } },
                {"idpEndpoint", n => { IdpEndpoint = n.GetStringValue(); } },
                {"idpInitiatedConfiguration", n => { IdpInitiatedConfiguration = n.GetObjectValue<SAMLv2IdpInitiatedConfiguration>(SAMLv2IdpInitiatedConfiguration.CreateFromDiscriminatorValue); } },
                {"issuer", n => { Issuer = n.GetStringValue(); } },
                {"keyId", n => { KeyId = n.GetGuidValue(); } },
                {"loginHintConfiguration", n => { LoginHintConfiguration = n.GetObjectValue<Askaiser.FusionAuth.Client.Models.LoginHintConfiguration>(Askaiser.FusionAuth.Client.Models.LoginHintConfiguration.CreateFromDiscriminatorValue); } },
                {"nameIdFormat", n => { NameIdFormat = n.GetStringValue(); } },
                {"postRequest", n => { PostRequest = n.GetBoolValue(); } },
                {"requestSigningKeyId", n => { RequestSigningKeyId = n.GetGuidValue(); } },
                {"signRequest", n => { SignRequest = n.GetBoolValue(); } },
                {"uniqueIdClaim", n => { UniqueIdClaim = n.GetStringValue(); } },
                {"useNameIdForEmail", n => { UseNameIdForEmail = n.GetBoolValue(); } },
                {"usernameClaim", n => { UsernameClaim = n.GetStringValue(); } },
                {"xmlSignatureC14nMethod", n => { XmlSignatureC14nMethod = n.GetEnumValue<CanonicalizationMethod>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<SAMLv2AssertionConfiguration>("assertionConfiguration", AssertionConfiguration);
            writer.WriteStringValue("buttonImageURL", ButtonImageURL);
            writer.WriteStringValue("buttonText", ButtonText);
            writer.WriteStringValue("emailClaim", EmailClaim);
            writer.WriteStringValue("idpEndpoint", IdpEndpoint);
            writer.WriteObjectValue<SAMLv2IdpInitiatedConfiguration>("idpInitiatedConfiguration", IdpInitiatedConfiguration);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteGuidValue("keyId", KeyId);
            writer.WriteObjectValue<Askaiser.FusionAuth.Client.Models.LoginHintConfiguration>("loginHintConfiguration", LoginHintConfiguration);
            writer.WriteStringValue("nameIdFormat", NameIdFormat);
            writer.WriteBoolValue("postRequest", PostRequest);
            writer.WriteGuidValue("requestSigningKeyId", RequestSigningKeyId);
            writer.WriteBoolValue("signRequest", SignRequest);
            writer.WriteStringValue("uniqueIdClaim", UniqueIdClaim);
            writer.WriteBoolValue("useNameIdForEmail", UseNameIdForEmail);
            writer.WriteStringValue("usernameClaim", UsernameClaim);
            writer.WriteEnumValue<CanonicalizationMethod>("xmlSignatureC14nMethod", XmlSignatureC14nMethod);
        }
    }
}
