// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// CleanSpeak configuration at the system and application level.
    /// </summary>
    public class CleanSpeakConfiguration : IParsable {
        /// <summary>The apiKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; set; }
#nullable restore
#else
        public string ApiKey { get; set; }
#endif
        /// <summary>The applicationIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? ApplicationIds { get; set; }
#nullable restore
#else
        public List<Guid?> ApplicationIds { get; set; }
#endif
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The usernameModeration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Askaiser.FusionAuth.Client.Models.UsernameModeration? UsernameModeration { get; set; }
#nullable restore
#else
        public Askaiser.FusionAuth.Client.Models.UsernameModeration UsernameModeration { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CleanSpeakConfiguration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CleanSpeakConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"apiKey", n => { ApiKey = n.GetStringValue(); } },
                {"applicationIds", n => { ApplicationIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"enabled", n => { Enabled = n.GetBoolValue(); } },
                {"url", n => { Url = n.GetStringValue(); } },
                {"usernameModeration", n => { UsernameModeration = n.GetObjectValue<Askaiser.FusionAuth.Client.Models.UsernameModeration>(Askaiser.FusionAuth.Client.Models.UsernameModeration.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apiKey", ApiKey);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("applicationIds", ApplicationIds);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteStringValue("url", Url);
            writer.WriteObjectValue<Askaiser.FusionAuth.Client.Models.UsernameModeration>("usernameModeration", UsernameModeration);
        }
    }
}
