// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class MultiFactorAuthenticatorMethod : IParsable {
        /// <summary>The algorithm property</summary>
        public TOTPAlgorithm? Algorithm { get; set; }
        /// <summary>The codeLength property</summary>
        public int? CodeLength { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The timeStep property</summary>
        public int? TimeStep { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MultiFactorAuthenticatorMethod CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MultiFactorAuthenticatorMethod();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"algorithm", n => { Algorithm = n.GetEnumValue<TOTPAlgorithm>(); } },
                {"codeLength", n => { CodeLength = n.GetIntValue(); } },
                {"enabled", n => { Enabled = n.GetBoolValue(); } },
                {"timeStep", n => { TimeStep = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<TOTPAlgorithm>("algorithm", Algorithm);
            writer.WriteIntValue("codeLength", CodeLength);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteIntValue("timeStep", TimeStep);
        }
    }
}
