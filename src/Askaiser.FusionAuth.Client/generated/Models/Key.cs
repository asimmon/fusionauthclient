// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// Domain for a public key, key pair or an HMAC secret. This is used by KeyMaster to manage keys for JWTs, SAML, etc.
    /// </summary>
    public class Key : IParsable {
        /// <summary>The algorithm property</summary>
        public KeyAlgorithm? Algorithm { get; set; }
        /// <summary>The certificate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Certificate { get; set; }
#nullable restore
#else
        public string Certificate { get; set; }
#endif
        /// <summary>The certificateInformation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Askaiser.FusionAuth.Client.Models.CertificateInformation? CertificateInformation { get; set; }
#nullable restore
#else
        public Askaiser.FusionAuth.Client.Models.CertificateInformation CertificateInformation { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? ExpirationInstant { get; set; }
        /// <summary>The hasPrivateKey property</summary>
        public bool? HasPrivateKey { get; set; }
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? InsertInstant { get; set; }
        /// <summary>The issuer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>The kid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Kid { get; set; }
#nullable restore
#else
        public string Kid { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? LastUpdateInstant { get; set; }
        /// <summary>The length property</summary>
        public int? Length { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The privateKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrivateKey { get; set; }
#nullable restore
#else
        public string PrivateKey { get; set; }
#endif
        /// <summary>The publicKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicKey { get; set; }
#nullable restore
#else
        public string PublicKey { get; set; }
#endif
        /// <summary>The secret property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Secret { get; set; }
#nullable restore
#else
        public string Secret { get; set; }
#endif
        /// <summary>The type property</summary>
        public KeyType? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Key CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Key();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"algorithm", n => { Algorithm = n.GetEnumValue<KeyAlgorithm>(); } },
                {"certificate", n => { Certificate = n.GetStringValue(); } },
                {"certificateInformation", n => { CertificateInformation = n.GetObjectValue<Askaiser.FusionAuth.Client.Models.CertificateInformation>(Askaiser.FusionAuth.Client.Models.CertificateInformation.CreateFromDiscriminatorValue); } },
                {"expirationInstant", n => { ExpirationInstant = n.GetLongValue(); } },
                {"hasPrivateKey", n => { HasPrivateKey = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"insertInstant", n => { InsertInstant = n.GetLongValue(); } },
                {"issuer", n => { Issuer = n.GetStringValue(); } },
                {"kid", n => { Kid = n.GetStringValue(); } },
                {"lastUpdateInstant", n => { LastUpdateInstant = n.GetLongValue(); } },
                {"length", n => { Length = n.GetIntValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"privateKey", n => { PrivateKey = n.GetStringValue(); } },
                {"publicKey", n => { PublicKey = n.GetStringValue(); } },
                {"secret", n => { Secret = n.GetStringValue(); } },
                {"type", n => { Type = n.GetEnumValue<KeyType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<KeyAlgorithm>("algorithm", Algorithm);
            writer.WriteStringValue("certificate", Certificate);
            writer.WriteObjectValue<Askaiser.FusionAuth.Client.Models.CertificateInformation>("certificateInformation", CertificateInformation);
            writer.WriteLongValue("expirationInstant", ExpirationInstant);
            writer.WriteBoolValue("hasPrivateKey", HasPrivateKey);
            writer.WriteGuidValue("id", Id);
            writer.WriteLongValue("insertInstant", InsertInstant);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteStringValue("kid", Kid);
            writer.WriteLongValue("lastUpdateInstant", LastUpdateInstant);
            writer.WriteIntValue("length", Length);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("privateKey", PrivateKey);
            writer.WriteStringValue("publicKey", PublicKey);
            writer.WriteStringValue("secret", Secret);
            writer.WriteEnumValue<KeyType>("type", Type);
        }
    }
}
