// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class ApplicationMultiFactorConfiguration : IParsable {
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MultiFactorEmailTemplate? Email { get; set; }
#nullable restore
#else
        public MultiFactorEmailTemplate Email { get; set; }
#endif
        /// <summary>The loginPolicy property</summary>
        public MultiFactorLoginPolicy? LoginPolicy { get; set; }
        /// <summary>The sms property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MultiFactorSMSTemplate? Sms { get; set; }
#nullable restore
#else
        public MultiFactorSMSTemplate Sms { get; set; }
#endif
        /// <summary>The trustPolicy property</summary>
        public ApplicationMultiFactorTrustPolicy? TrustPolicy { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApplicationMultiFactorConfiguration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApplicationMultiFactorConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"email", n => { Email = n.GetObjectValue<MultiFactorEmailTemplate>(MultiFactorEmailTemplate.CreateFromDiscriminatorValue); } },
                {"loginPolicy", n => { LoginPolicy = n.GetEnumValue<MultiFactorLoginPolicy>(); } },
                {"sms", n => { Sms = n.GetObjectValue<MultiFactorSMSTemplate>(MultiFactorSMSTemplate.CreateFromDiscriminatorValue); } },
                {"trustPolicy", n => { TrustPolicy = n.GetEnumValue<ApplicationMultiFactorTrustPolicy>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<MultiFactorEmailTemplate>("email", Email);
            writer.WriteEnumValue<MultiFactorLoginPolicy>("loginPolicy", LoginPolicy);
            writer.WriteObjectValue<MultiFactorSMSTemplate>("sms", Sms);
            writer.WriteEnumValue<ApplicationMultiFactorTrustPolicy>("trustPolicy", TrustPolicy);
        }
    }
}
