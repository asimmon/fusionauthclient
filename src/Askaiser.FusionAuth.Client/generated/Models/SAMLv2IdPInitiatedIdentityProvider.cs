// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// SAML v2 IdP Initiated identity provider configuration.
    /// </summary>
    public class SAMLv2IdPInitiatedIdentityProvider : IParsable {
        /// <summary>The emailClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailClaim { get; set; }
#nullable restore
#else
        public string EmailClaim { get; set; }
#endif
        /// <summary>The issuer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>The keyId property</summary>
        public Guid? KeyId { get; set; }
        /// <summary>The uniqueIdClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueIdClaim { get; set; }
#nullable restore
#else
        public string UniqueIdClaim { get; set; }
#endif
        /// <summary>The useNameIdForEmail property</summary>
        public bool? UseNameIdForEmail { get; set; }
        /// <summary>The usernameClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsernameClaim { get; set; }
#nullable restore
#else
        public string UsernameClaim { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SAMLv2IdPInitiatedIdentityProvider CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SAMLv2IdPInitiatedIdentityProvider();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"emailClaim", n => { EmailClaim = n.GetStringValue(); } },
                {"issuer", n => { Issuer = n.GetStringValue(); } },
                {"keyId", n => { KeyId = n.GetGuidValue(); } },
                {"uniqueIdClaim", n => { UniqueIdClaim = n.GetStringValue(); } },
                {"useNameIdForEmail", n => { UseNameIdForEmail = n.GetBoolValue(); } },
                {"usernameClaim", n => { UsernameClaim = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("emailClaim", EmailClaim);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteGuidValue("keyId", KeyId);
            writer.WriteStringValue("uniqueIdClaim", UniqueIdClaim);
            writer.WriteBoolValue("useNameIdForEmail", UseNameIdForEmail);
            writer.WriteStringValue("usernameClaim", UsernameClaim);
        }
    }
}
