// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class OAuth2Configuration : IParsable {
        /// <summary>The authorizedOriginURLs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorizedOriginURLs { get; set; }
#nullable restore
#else
        public List<string> AuthorizedOriginURLs { get; set; }
#endif
        /// <summary>The authorizedRedirectURLs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorizedRedirectURLs { get; set; }
#nullable restore
#else
        public List<string> AuthorizedRedirectURLs { get; set; }
#endif
        /// <summary>The authorizedURLValidationPolicy property</summary>
        public Oauth2AuthorizedURLValidationPolicy? AuthorizedURLValidationPolicy { get; set; }
        /// <summary>The clientAuthenticationPolicy property</summary>
        public Askaiser.FusionAuth.Client.Models.ClientAuthenticationPolicy? ClientAuthenticationPolicy { get; set; }
        /// <summary>The clientId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>The clientSecret property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientSecret { get; set; }
#nullable restore
#else
        public string ClientSecret { get; set; }
#endif
        /// <summary>The debug property</summary>
        public bool? Debug { get; set; }
        /// <summary>The deviceVerificationURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceVerificationURL { get; set; }
#nullable restore
#else
        public string DeviceVerificationURL { get; set; }
#endif
        /// <summary>The generateRefreshTokens property</summary>
        public bool? GenerateRefreshTokens { get; set; }
        /// <summary>The logoutBehavior property</summary>
        public Askaiser.FusionAuth.Client.Models.LogoutBehavior? LogoutBehavior { get; set; }
        /// <summary>The logoutURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoutURL { get; set; }
#nullable restore
#else
        public string LogoutURL { get; set; }
#endif
        /// <summary>The proofKeyForCodeExchangePolicy property</summary>
        public Askaiser.FusionAuth.Client.Models.ProofKeyForCodeExchangePolicy? ProofKeyForCodeExchangePolicy { get; set; }
        /// <summary>The requireClientAuthentication property</summary>
        public bool? RequireClientAuthentication { get; set; }
        /// <summary>The requireRegistration property</summary>
        public bool? RequireRegistration { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static OAuth2Configuration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new OAuth2Configuration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"authorizedOriginURLs", n => { AuthorizedOriginURLs = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"authorizedRedirectURLs", n => { AuthorizedRedirectURLs = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"authorizedURLValidationPolicy", n => { AuthorizedURLValidationPolicy = n.GetEnumValue<Oauth2AuthorizedURLValidationPolicy>(); } },
                {"clientAuthenticationPolicy", n => { ClientAuthenticationPolicy = n.GetEnumValue<ClientAuthenticationPolicy>(); } },
                {"clientId", n => { ClientId = n.GetStringValue(); } },
                {"clientSecret", n => { ClientSecret = n.GetStringValue(); } },
                {"debug", n => { Debug = n.GetBoolValue(); } },
                {"deviceVerificationURL", n => { DeviceVerificationURL = n.GetStringValue(); } },
                {"generateRefreshTokens", n => { GenerateRefreshTokens = n.GetBoolValue(); } },
                {"logoutBehavior", n => { LogoutBehavior = n.GetEnumValue<LogoutBehavior>(); } },
                {"logoutURL", n => { LogoutURL = n.GetStringValue(); } },
                {"proofKeyForCodeExchangePolicy", n => { ProofKeyForCodeExchangePolicy = n.GetEnumValue<ProofKeyForCodeExchangePolicy>(); } },
                {"requireClientAuthentication", n => { RequireClientAuthentication = n.GetBoolValue(); } },
                {"requireRegistration", n => { RequireRegistration = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("authorizedOriginURLs", AuthorizedOriginURLs);
            writer.WriteCollectionOfPrimitiveValues<string>("authorizedRedirectURLs", AuthorizedRedirectURLs);
            writer.WriteEnumValue<Oauth2AuthorizedURLValidationPolicy>("authorizedURLValidationPolicy", AuthorizedURLValidationPolicy);
            writer.WriteEnumValue<ClientAuthenticationPolicy>("clientAuthenticationPolicy", ClientAuthenticationPolicy);
            writer.WriteStringValue("clientId", ClientId);
            writer.WriteStringValue("clientSecret", ClientSecret);
            writer.WriteBoolValue("debug", Debug);
            writer.WriteStringValue("deviceVerificationURL", DeviceVerificationURL);
            writer.WriteBoolValue("generateRefreshTokens", GenerateRefreshTokens);
            writer.WriteEnumValue<LogoutBehavior>("logoutBehavior", LogoutBehavior);
            writer.WriteStringValue("logoutURL", LogoutURL);
            writer.WriteEnumValue<ProofKeyForCodeExchangePolicy>("proofKeyForCodeExchangePolicy", ProofKeyForCodeExchangePolicy);
            writer.WriteBoolValue("requireClientAuthentication", RequireClientAuthentication);
            writer.WriteBoolValue("requireRegistration", RequireRegistration);
        }
    }
}
