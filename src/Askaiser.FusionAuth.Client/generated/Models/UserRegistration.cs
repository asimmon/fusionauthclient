// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// User registration information for a single application.
    /// </summary>
    public class UserRegistration : IParsable {
        /// <summary>The applicationId property</summary>
        public Guid? ApplicationId { get; set; }
        /// <summary>The authenticationToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthenticationToken { get; set; }
#nullable restore
#else
        public string AuthenticationToken { get; set; }
#endif
        /// <summary>The cleanSpeakId property</summary>
        public Guid? CleanSpeakId { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserRegistration_data? Data { get; set; }
#nullable restore
#else
        public UserRegistration_data Data { get; set; }
#endif
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? InsertInstant { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? LastLoginInstant { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? LastUpdateInstant { get; set; }
        /// <summary>The preferredLanguages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PreferredLanguages { get; set; }
#nullable restore
#else
        public List<string> PreferredLanguages { get; set; }
#endif
        /// <summary>Timezone Identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>The tokens property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserRegistration_tokens? Tokens { get; set; }
#nullable restore
#else
        public UserRegistration_tokens Tokens { get; set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>Status for content like usernames, profile attributes, etc.</summary>
        public ContentStatus? UsernameStatus { get; set; }
        /// <summary>The verified property</summary>
        public bool? Verified { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? VerifiedInstant { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UserRegistration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UserRegistration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"applicationId", n => { ApplicationId = n.GetGuidValue(); } },
                {"authenticationToken", n => { AuthenticationToken = n.GetStringValue(); } },
                {"cleanSpeakId", n => { CleanSpeakId = n.GetGuidValue(); } },
                {"data", n => { Data = n.GetObjectValue<UserRegistration_data>(UserRegistration_data.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"insertInstant", n => { InsertInstant = n.GetLongValue(); } },
                {"lastLoginInstant", n => { LastLoginInstant = n.GetLongValue(); } },
                {"lastUpdateInstant", n => { LastUpdateInstant = n.GetLongValue(); } },
                {"preferredLanguages", n => { PreferredLanguages = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"timezone", n => { Timezone = n.GetStringValue(); } },
                {"tokens", n => { Tokens = n.GetObjectValue<UserRegistration_tokens>(UserRegistration_tokens.CreateFromDiscriminatorValue); } },
                {"username", n => { Username = n.GetStringValue(); } },
                {"usernameStatus", n => { UsernameStatus = n.GetEnumValue<ContentStatus>(); } },
                {"verified", n => { Verified = n.GetBoolValue(); } },
                {"verifiedInstant", n => { VerifiedInstant = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("applicationId", ApplicationId);
            writer.WriteStringValue("authenticationToken", AuthenticationToken);
            writer.WriteGuidValue("cleanSpeakId", CleanSpeakId);
            writer.WriteObjectValue<UserRegistration_data>("data", Data);
            writer.WriteGuidValue("id", Id);
            writer.WriteLongValue("insertInstant", InsertInstant);
            writer.WriteLongValue("lastLoginInstant", LastLoginInstant);
            writer.WriteLongValue("lastUpdateInstant", LastUpdateInstant);
            writer.WriteCollectionOfPrimitiveValues<string>("preferredLanguages", PreferredLanguages);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteObjectValue<UserRegistration_tokens>("tokens", Tokens);
            writer.WriteStringValue("username", Username);
            writer.WriteEnumValue<ContentStatus>("usernameStatus", UsernameStatus);
            writer.WriteBoolValue("verified", Verified);
            writer.WriteLongValue("verifiedInstant", VerifiedInstant);
        }
    }
}
