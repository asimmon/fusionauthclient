// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// Allows the Relying Party to specify desired attributes of a new credential.
    /// </summary>
    public class PublicKeyCredentialCreationOptions : IParsable {
        /// <summary>Used to communicate whether and how authenticator attestation should be delivered to the Relying Party</summary>
        public AttestationConveyancePreference? Attestation { get; set; }
        /// <summary>Used by the Relying Party to specify their requirements for authenticator attributes. Fields use the deprecated &quot;resident key&quot; terminology to refer  to client-side discoverable credentials to maintain backwards compatibility with WebAuthn Level 1.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AuthenticatorSelectionCriteria? AuthenticatorSelection { get; set; }
#nullable restore
#else
        public AuthenticatorSelectionCriteria AuthenticatorSelection { get; set; }
#endif
        /// <summary>The challenge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Challenge { get; set; }
#nullable restore
#else
        public string Challenge { get; set; }
#endif
        /// <summary>The excludeCredentials property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PublicKeyCredentialDescriptor>? ExcludeCredentials { get; set; }
#nullable restore
#else
        public List<PublicKeyCredentialDescriptor> ExcludeCredentials { get; set; }
#endif
        /// <summary>Options to request extensions during credential registration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WebAuthnRegistrationExtensionOptions? Extensions { get; set; }
#nullable restore
#else
        public WebAuthnRegistrationExtensionOptions Extensions { get; set; }
#endif
        /// <summary>The pubKeyCredParams property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PublicKeyCredentialParameters>? PubKeyCredParams { get; set; }
#nullable restore
#else
        public List<PublicKeyCredentialParameters> PubKeyCredParams { get; set; }
#endif
        /// <summary>Supply additional information about the Relying Party when creating a new credential</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PublicKeyCredentialRelyingPartyEntity? Rp { get; set; }
#nullable restore
#else
        public PublicKeyCredentialRelyingPartyEntity Rp { get; set; }
#endif
        /// <summary>The timeout property</summary>
        public long? Timeout { get; set; }
        /// <summary>Supply additional information about the user account when creating a new credential</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PublicKeyCredentialUserEntity? User { get; set; }
#nullable restore
#else
        public PublicKeyCredentialUserEntity User { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PublicKeyCredentialCreationOptions CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PublicKeyCredentialCreationOptions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"attestation", n => { Attestation = n.GetEnumValue<AttestationConveyancePreference>(); } },
                {"authenticatorSelection", n => { AuthenticatorSelection = n.GetObjectValue<AuthenticatorSelectionCriteria>(AuthenticatorSelectionCriteria.CreateFromDiscriminatorValue); } },
                {"challenge", n => { Challenge = n.GetStringValue(); } },
                {"excludeCredentials", n => { ExcludeCredentials = n.GetCollectionOfObjectValues<PublicKeyCredentialDescriptor>(PublicKeyCredentialDescriptor.CreateFromDiscriminatorValue)?.ToList(); } },
                {"extensions", n => { Extensions = n.GetObjectValue<WebAuthnRegistrationExtensionOptions>(WebAuthnRegistrationExtensionOptions.CreateFromDiscriminatorValue); } },
                {"pubKeyCredParams", n => { PubKeyCredParams = n.GetCollectionOfObjectValues<PublicKeyCredentialParameters>(PublicKeyCredentialParameters.CreateFromDiscriminatorValue)?.ToList(); } },
                {"rp", n => { Rp = n.GetObjectValue<PublicKeyCredentialRelyingPartyEntity>(PublicKeyCredentialRelyingPartyEntity.CreateFromDiscriminatorValue); } },
                {"timeout", n => { Timeout = n.GetLongValue(); } },
                {"user", n => { User = n.GetObjectValue<PublicKeyCredentialUserEntity>(PublicKeyCredentialUserEntity.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<AttestationConveyancePreference>("attestation", Attestation);
            writer.WriteObjectValue<AuthenticatorSelectionCriteria>("authenticatorSelection", AuthenticatorSelection);
            writer.WriteStringValue("challenge", Challenge);
            writer.WriteCollectionOfObjectValues<PublicKeyCredentialDescriptor>("excludeCredentials", ExcludeCredentials);
            writer.WriteObjectValue<WebAuthnRegistrationExtensionOptions>("extensions", Extensions);
            writer.WriteCollectionOfObjectValues<PublicKeyCredentialParameters>("pubKeyCredParams", PubKeyCredParams);
            writer.WriteObjectValue<PublicKeyCredentialRelyingPartyEntity>("rp", Rp);
            writer.WriteLongValue("timeout", Timeout);
            writer.WriteObjectValue<PublicKeyCredentialUserEntity>("user", User);
        }
    }
}
