// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class OpenIdConnectIdentityProvider : IParsable {
        /// <summary>The applicationConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenIdConnectIdentityProvider_applicationConfiguration? ApplicationConfiguration { get; set; }
#nullable restore
#else
        public OpenIdConnectIdentityProvider_applicationConfiguration ApplicationConfiguration { get; set; }
#endif
        /// <summary>The buttonImageURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ButtonImageURL { get; set; }
#nullable restore
#else
        public string ButtonImageURL { get; set; }
#endif
        /// <summary>The buttonText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ButtonText { get; set; }
#nullable restore
#else
        public string ButtonText { get; set; }
#endif
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenIdConnectIdentityProvider_data? Data { get; set; }
#nullable restore
#else
        public OpenIdConnectIdentityProvider_data Data { get; set; }
#endif
        /// <summary>The debug property</summary>
        public bool? Debug { get; set; }
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? InsertInstant { get; set; }
        /// <summary>The lambdaConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ProviderLambdaConfiguration? LambdaConfiguration { get; set; }
#nullable restore
#else
        public ProviderLambdaConfiguration LambdaConfiguration { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? LastUpdateInstant { get; set; }
        /// <summary>The IdP behavior when no user link has been made yet.</summary>
        public IdentityProviderLinkingStrategy? LinkingStrategy { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The oauth2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IdentityProviderOauth2Configuration? Oauth2 { get; set; }
#nullable restore
#else
        public IdentityProviderOauth2Configuration Oauth2 { get; set; }
#endif
        /// <summary>The postRequest property</summary>
        public bool? PostRequest { get; set; }
        /// <summary>The tenantConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenIdConnectIdentityProvider_tenantConfiguration? TenantConfiguration { get; set; }
#nullable restore
#else
        public OpenIdConnectIdentityProvider_tenantConfiguration TenantConfiguration { get; set; }
#endif
        /// <summary>The type property</summary>
        public IdentityProviderType? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static OpenIdConnectIdentityProvider CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new OpenIdConnectIdentityProvider();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"applicationConfiguration", n => { ApplicationConfiguration = n.GetObjectValue<OpenIdConnectIdentityProvider_applicationConfiguration>(OpenIdConnectIdentityProvider_applicationConfiguration.CreateFromDiscriminatorValue); } },
                {"buttonImageURL", n => { ButtonImageURL = n.GetStringValue(); } },
                {"buttonText", n => { ButtonText = n.GetStringValue(); } },
                {"data", n => { Data = n.GetObjectValue<OpenIdConnectIdentityProvider_data>(OpenIdConnectIdentityProvider_data.CreateFromDiscriminatorValue); } },
                {"debug", n => { Debug = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"insertInstant", n => { InsertInstant = n.GetLongValue(); } },
                {"lambdaConfiguration", n => { LambdaConfiguration = n.GetObjectValue<ProviderLambdaConfiguration>(ProviderLambdaConfiguration.CreateFromDiscriminatorValue); } },
                {"lastUpdateInstant", n => { LastUpdateInstant = n.GetLongValue(); } },
                {"linkingStrategy", n => { LinkingStrategy = n.GetEnumValue<IdentityProviderLinkingStrategy>(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"oauth2", n => { Oauth2 = n.GetObjectValue<IdentityProviderOauth2Configuration>(IdentityProviderOauth2Configuration.CreateFromDiscriminatorValue); } },
                {"postRequest", n => { PostRequest = n.GetBoolValue(); } },
                {"tenantConfiguration", n => { TenantConfiguration = n.GetObjectValue<OpenIdConnectIdentityProvider_tenantConfiguration>(OpenIdConnectIdentityProvider_tenantConfiguration.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<IdentityProviderType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<OpenIdConnectIdentityProvider_applicationConfiguration>("applicationConfiguration", ApplicationConfiguration);
            writer.WriteStringValue("buttonImageURL", ButtonImageURL);
            writer.WriteStringValue("buttonText", ButtonText);
            writer.WriteObjectValue<OpenIdConnectIdentityProvider_data>("data", Data);
            writer.WriteBoolValue("debug", Debug);
            writer.WriteGuidValue("id", Id);
            writer.WriteLongValue("insertInstant", InsertInstant);
            writer.WriteObjectValue<ProviderLambdaConfiguration>("lambdaConfiguration", LambdaConfiguration);
            writer.WriteLongValue("lastUpdateInstant", LastUpdateInstant);
            writer.WriteEnumValue<IdentityProviderLinkingStrategy>("linkingStrategy", LinkingStrategy);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<IdentityProviderOauth2Configuration>("oauth2", Oauth2);
            writer.WriteBoolValue("postRequest", PostRequest);
            writer.WriteObjectValue<OpenIdConnectIdentityProvider_tenantConfiguration>("tenantConfiguration", TenantConfiguration);
            writer.WriteEnumValue<IdentityProviderType>("type", Type);
        }
    }
}
