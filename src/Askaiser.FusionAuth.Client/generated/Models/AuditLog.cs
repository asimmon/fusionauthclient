// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// An audit log.
    /// </summary>
    public class AuditLog : IParsable {
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AuditLog_data? Data { get; set; }
#nullable restore
#else
        public AuditLog_data Data { get; set; }
#endif
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? InsertInstant { get; set; }
        /// <summary>The insertUser property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InsertUser { get; set; }
#nullable restore
#else
        public string InsertUser { get; set; }
#endif
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The newValue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AuditLog_newValue? NewValue { get; set; }
#nullable restore
#else
        public AuditLog_newValue NewValue { get; set; }
#endif
        /// <summary>The oldValue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AuditLog_oldValue? OldValue { get; set; }
#nullable restore
#else
        public AuditLog_oldValue OldValue { get; set; }
#endif
        /// <summary>The reason property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AuditLog CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AuditLog();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"data", n => { Data = n.GetObjectValue<AuditLog_data>(AuditLog_data.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"insertInstant", n => { InsertInstant = n.GetLongValue(); } },
                {"insertUser", n => { InsertUser = n.GetStringValue(); } },
                {"message", n => { Message = n.GetStringValue(); } },
                {"newValue", n => { NewValue = n.GetObjectValue<AuditLog_newValue>(AuditLog_newValue.CreateFromDiscriminatorValue); } },
                {"oldValue", n => { OldValue = n.GetObjectValue<AuditLog_oldValue>(AuditLog_oldValue.CreateFromDiscriminatorValue); } },
                {"reason", n => { Reason = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AuditLog_data>("data", Data);
            writer.WriteLongValue("id", Id);
            writer.WriteLongValue("insertInstant", InsertInstant);
            writer.WriteStringValue("insertUser", InsertUser);
            writer.WriteStringValue("message", Message);
            writer.WriteObjectValue<AuditLog_newValue>("newValue", NewValue);
            writer.WriteObjectValue<AuditLog_oldValue>("oldValue", OldValue);
            writer.WriteStringValue("reason", Reason);
        }
    }
}
