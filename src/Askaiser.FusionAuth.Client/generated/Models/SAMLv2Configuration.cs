// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class SAMLv2Configuration : IParsable {
        /// <summary>The assertionEncryptionConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SAMLv2AssertionEncryptionConfiguration? AssertionEncryptionConfiguration { get; set; }
#nullable restore
#else
        public SAMLv2AssertionEncryptionConfiguration AssertionEncryptionConfiguration { get; set; }
#endif
        /// <summary>The audience property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Audience { get; set; }
#nullable restore
#else
        public string Audience { get; set; }
#endif
        /// <summary>The authorizedRedirectURLs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorizedRedirectURLs { get; set; }
#nullable restore
#else
        public List<string> AuthorizedRedirectURLs { get; set; }
#endif
        /// <summary>The callbackURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallbackURL { get; set; }
#nullable restore
#else
        public string CallbackURL { get; set; }
#endif
        /// <summary>The debug property</summary>
        public bool? Debug { get; set; }
        /// <summary>The defaultVerificationKeyId property</summary>
        public Guid? DefaultVerificationKeyId { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>IdP Initiated login configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SAMLv2IdPInitiatedLoginConfiguration? InitiatedLogin { get; set; }
#nullable restore
#else
        public SAMLv2IdPInitiatedLoginConfiguration InitiatedLogin { get; set; }
#endif
        /// <summary>The issuer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>The keyId property</summary>
        public Guid? KeyId { get; set; }
        /// <summary>The loginHintConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Askaiser.FusionAuth.Client.Models.LoginHintConfiguration? LoginHintConfiguration { get; set; }
#nullable restore
#else
        public Askaiser.FusionAuth.Client.Models.LoginHintConfiguration LoginHintConfiguration { get; set; }
#endif
        /// <summary>The logout property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SAMLv2Logout? Logout { get; set; }
#nullable restore
#else
        public SAMLv2Logout Logout { get; set; }
#endif
        /// <summary>The logoutURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoutURL { get; set; }
#nullable restore
#else
        public string LogoutURL { get; set; }
#endif
        /// <summary>The requireSignedRequests property</summary>
        public bool? RequireSignedRequests { get; set; }
        /// <summary>XML canonicalization method enumeration. This is used for the IdP and SP side of FusionAuth SAML.</summary>
        public CanonicalizationMethod? XmlSignatureC14nMethod { get; set; }
        /// <summary>The xmlSignatureLocation property</summary>
        public Askaiser.FusionAuth.Client.Models.XMLSignatureLocation? XmlSignatureLocation { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SAMLv2Configuration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SAMLv2Configuration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"assertionEncryptionConfiguration", n => { AssertionEncryptionConfiguration = n.GetObjectValue<SAMLv2AssertionEncryptionConfiguration>(SAMLv2AssertionEncryptionConfiguration.CreateFromDiscriminatorValue); } },
                {"audience", n => { Audience = n.GetStringValue(); } },
                {"authorizedRedirectURLs", n => { AuthorizedRedirectURLs = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"callbackURL", n => { CallbackURL = n.GetStringValue(); } },
                {"debug", n => { Debug = n.GetBoolValue(); } },
                {"defaultVerificationKeyId", n => { DefaultVerificationKeyId = n.GetGuidValue(); } },
                {"enabled", n => { Enabled = n.GetBoolValue(); } },
                {"initiatedLogin", n => { InitiatedLogin = n.GetObjectValue<SAMLv2IdPInitiatedLoginConfiguration>(SAMLv2IdPInitiatedLoginConfiguration.CreateFromDiscriminatorValue); } },
                {"issuer", n => { Issuer = n.GetStringValue(); } },
                {"keyId", n => { KeyId = n.GetGuidValue(); } },
                {"loginHintConfiguration", n => { LoginHintConfiguration = n.GetObjectValue<Askaiser.FusionAuth.Client.Models.LoginHintConfiguration>(Askaiser.FusionAuth.Client.Models.LoginHintConfiguration.CreateFromDiscriminatorValue); } },
                {"logout", n => { Logout = n.GetObjectValue<SAMLv2Logout>(SAMLv2Logout.CreateFromDiscriminatorValue); } },
                {"logoutURL", n => { LogoutURL = n.GetStringValue(); } },
                {"requireSignedRequests", n => { RequireSignedRequests = n.GetBoolValue(); } },
                {"xmlSignatureC14nMethod", n => { XmlSignatureC14nMethod = n.GetEnumValue<CanonicalizationMethod>(); } },
                {"xmlSignatureLocation", n => { XmlSignatureLocation = n.GetEnumValue<XMLSignatureLocation>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<SAMLv2AssertionEncryptionConfiguration>("assertionEncryptionConfiguration", AssertionEncryptionConfiguration);
            writer.WriteStringValue("audience", Audience);
            writer.WriteCollectionOfPrimitiveValues<string>("authorizedRedirectURLs", AuthorizedRedirectURLs);
            writer.WriteStringValue("callbackURL", CallbackURL);
            writer.WriteBoolValue("debug", Debug);
            writer.WriteGuidValue("defaultVerificationKeyId", DefaultVerificationKeyId);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<SAMLv2IdPInitiatedLoginConfiguration>("initiatedLogin", InitiatedLogin);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteGuidValue("keyId", KeyId);
            writer.WriteObjectValue<Askaiser.FusionAuth.Client.Models.LoginHintConfiguration>("loginHintConfiguration", LoginHintConfiguration);
            writer.WriteObjectValue<SAMLv2Logout>("logout", Logout);
            writer.WriteStringValue("logoutURL", LogoutURL);
            writer.WriteBoolValue("requireSignedRequests", RequireSignedRequests);
            writer.WriteEnumValue<CanonicalizationMethod>("xmlSignatureC14nMethod", XmlSignatureC14nMethod);
            writer.WriteEnumValue<XMLSignatureLocation>("xmlSignatureLocation", XmlSignatureLocation);
        }
    }
}
