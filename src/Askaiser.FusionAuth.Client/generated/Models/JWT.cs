// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// JSON Web Token (JWT) as defined by RFC 7519.  &lt;pre&gt;  From RFC 7519 Section 1. Introduction:     The suggested pronunciation of JWT is the same as the English word &quot;jot&quot;.  &lt;pre&gt;  The JWT is not Thread-Safe and should not be re-used.
    /// </summary>
    public class JWT : IParsable {
        /// <summary>The aud property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JWT_aud? Aud { get; set; }
#nullable restore
#else
        public JWT_aud Aud { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? Exp { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? Iat { get; set; }
        /// <summary>The iss property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iss { get; set; }
#nullable restore
#else
        public string Iss { get; set; }
#endif
        /// <summary>The jti property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Jti { get; set; }
#nullable restore
#else
        public string Jti { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? Nbf { get; set; }
        /// <summary>The otherClaims property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JWT_otherClaims? OtherClaims { get; set; }
#nullable restore
#else
        public JWT_otherClaims OtherClaims { get; set; }
#endif
        /// <summary>The sub property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sub { get; set; }
#nullable restore
#else
        public string Sub { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JWT CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JWT();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"aud", n => { Aud = n.GetObjectValue<JWT_aud>(JWT_aud.CreateFromDiscriminatorValue); } },
                {"exp", n => { Exp = n.GetLongValue(); } },
                {"iat", n => { Iat = n.GetLongValue(); } },
                {"iss", n => { Iss = n.GetStringValue(); } },
                {"jti", n => { Jti = n.GetStringValue(); } },
                {"nbf", n => { Nbf = n.GetLongValue(); } },
                {"otherClaims", n => { OtherClaims = n.GetObjectValue<JWT_otherClaims>(JWT_otherClaims.CreateFromDiscriminatorValue); } },
                {"sub", n => { Sub = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<JWT_aud>("aud", Aud);
            writer.WriteLongValue("exp", Exp);
            writer.WriteLongValue("iat", Iat);
            writer.WriteStringValue("iss", Iss);
            writer.WriteStringValue("jti", Jti);
            writer.WriteLongValue("nbf", Nbf);
            writer.WriteObjectValue<JWT_otherClaims>("otherClaims", OtherClaims);
            writer.WriteStringValue("sub", Sub);
        }
    }
}
