// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// domain POJO to represent AuthenticationKey
    /// </summary>
    public class APIKey : IParsable {
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? InsertInstant { get; set; }
        /// <summary>The ipAccessControlListId property</summary>
        public Guid? IpAccessControlListId { get; set; }
        /// <summary>The key property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>The keyManager property</summary>
        public bool? KeyManager { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? LastUpdateInstant { get; set; }
        /// <summary>The metaData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public APIKeyMetaData? MetaData { get; set; }
#nullable restore
#else
        public APIKeyMetaData MetaData { get; set; }
#endif
        /// <summary>The permissions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public APIKeyPermissions? Permissions { get; set; }
#nullable restore
#else
        public APIKeyPermissions Permissions { get; set; }
#endif
        /// <summary>The tenantId property</summary>
        public Guid? TenantId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static APIKey CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new APIKey();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"id", n => { Id = n.GetGuidValue(); } },
                {"insertInstant", n => { InsertInstant = n.GetLongValue(); } },
                {"ipAccessControlListId", n => { IpAccessControlListId = n.GetGuidValue(); } },
                {"key", n => { Key = n.GetStringValue(); } },
                {"keyManager", n => { KeyManager = n.GetBoolValue(); } },
                {"lastUpdateInstant", n => { LastUpdateInstant = n.GetLongValue(); } },
                {"metaData", n => { MetaData = n.GetObjectValue<APIKeyMetaData>(APIKeyMetaData.CreateFromDiscriminatorValue); } },
                {"permissions", n => { Permissions = n.GetObjectValue<APIKeyPermissions>(APIKeyPermissions.CreateFromDiscriminatorValue); } },
                {"tenantId", n => { TenantId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("id", Id);
            writer.WriteLongValue("insertInstant", InsertInstant);
            writer.WriteGuidValue("ipAccessControlListId", IpAccessControlListId);
            writer.WriteStringValue("key", Key);
            writer.WriteBoolValue("keyManager", KeyManager);
            writer.WriteLongValue("lastUpdateInstant", LastUpdateInstant);
            writer.WriteObjectValue<APIKeyMetaData>("metaData", MetaData);
            writer.WriteObjectValue<APIKeyPermissions>("permissions", Permissions);
            writer.WriteGuidValue("tenantId", TenantId);
        }
    }
}
