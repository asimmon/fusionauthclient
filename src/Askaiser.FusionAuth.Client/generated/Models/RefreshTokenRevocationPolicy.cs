// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class RefreshTokenRevocationPolicy : IParsable {
        /// <summary>The onLoginPrevented property</summary>
        public bool? OnLoginPrevented { get; set; }
        /// <summary>The onMultiFactorEnable property</summary>
        public bool? OnMultiFactorEnable { get; set; }
        /// <summary>The onPasswordChanged property</summary>
        public bool? OnPasswordChanged { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RefreshTokenRevocationPolicy CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RefreshTokenRevocationPolicy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"onLoginPrevented", n => { OnLoginPrevented = n.GetBoolValue(); } },
                {"onMultiFactorEnable", n => { OnMultiFactorEnable = n.GetBoolValue(); } },
                {"onPasswordChanged", n => { OnPasswordChanged = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("onLoginPrevented", OnLoginPrevented);
            writer.WriteBoolValue("onMultiFactorEnable", OnMultiFactorEnable);
            writer.WriteBoolValue("onPasswordChanged", OnPasswordChanged);
        }
    }
}
