// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class MessengerResponse : IParsable {
        /// <summary>Do not require a setter for &apos;type&apos;, it is defined by the concrete class and is not mutable</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public BaseMessengerConfiguration? Messenger { get; set; }
#nullable restore
#else
        public BaseMessengerConfiguration Messenger { get; set; }
#endif
        /// <summary>The messengers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<BaseMessengerConfiguration>? Messengers { get; set; }
#nullable restore
#else
        public List<BaseMessengerConfiguration> Messengers { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MessengerResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MessengerResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"messenger", n => { Messenger = n.GetObjectValue<BaseMessengerConfiguration>(BaseMessengerConfiguration.CreateFromDiscriminatorValue); } },
                {"messengers", n => { Messengers = n.GetCollectionOfObjectValues<BaseMessengerConfiguration>(BaseMessengerConfiguration.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<BaseMessengerConfiguration>("messenger", Messenger);
            writer.WriteCollectionOfObjectValues<BaseMessengerConfiguration>("messengers", Messengers);
        }
    }
}
