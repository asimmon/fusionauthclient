// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class LoginResponse : IParsable {
        /// <summary>The actions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<LoginPreventedResponse>? Actions { get; set; }
#nullable restore
#else
        public List<LoginPreventedResponse> Actions { get; set; }
#endif
        /// <summary>The changePasswordId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChangePasswordId { get; set; }
#nullable restore
#else
        public string ChangePasswordId { get; set; }
#endif
        /// <summary>The changePasswordReason property</summary>
        public Askaiser.FusionAuth.Client.Models.ChangePasswordReason? ChangePasswordReason { get; set; }
        /// <summary>The configurableMethods property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ConfigurableMethods { get; set; }
#nullable restore
#else
        public List<string> ConfigurableMethods { get; set; }
#endif
        /// <summary>The emailVerificationId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailVerificationId { get; set; }
#nullable restore
#else
        public string EmailVerificationId { get; set; }
#endif
        /// <summary>The methods property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TwoFactorMethod>? Methods { get; set; }
#nullable restore
#else
        public List<TwoFactorMethod> Methods { get; set; }
#endif
        /// <summary>The pendingIdPLinkId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PendingIdPLinkId { get; set; }
#nullable restore
#else
        public string PendingIdPLinkId { get; set; }
#endif
        /// <summary>The refreshToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RefreshToken { get; set; }
#nullable restore
#else
        public string RefreshToken { get; set; }
#endif
        /// <summary>The refreshTokenId property</summary>
        public Guid? RefreshTokenId { get; set; }
        /// <summary>The registrationVerificationId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RegistrationVerificationId { get; set; }
#nullable restore
#else
        public string RegistrationVerificationId { get; set; }
#endif
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LoginResponse_state? State { get; set; }
#nullable restore
#else
        public LoginResponse_state State { get; set; }
#endif
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? TokenExpirationInstant { get; set; }
        /// <summary>The trustToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrustToken { get; set; }
#nullable restore
#else
        public string TrustToken { get; set; }
#endif
        /// <summary>The twoFactorId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TwoFactorId { get; set; }
#nullable restore
#else
        public string TwoFactorId { get; set; }
#endif
        /// <summary>The twoFactorTrustId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TwoFactorTrustId { get; set; }
#nullable restore
#else
        public string TwoFactorTrustId { get; set; }
#endif
        /// <summary>The global view of a User. This object contains all global information about the user including birth date, registration information  preferred languages, global attributes, etc.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Askaiser.FusionAuth.Client.Models.User? User { get; set; }
#nullable restore
#else
        public Askaiser.FusionAuth.Client.Models.User User { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LoginResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LoginResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"actions", n => { Actions = n.GetCollectionOfObjectValues<LoginPreventedResponse>(LoginPreventedResponse.CreateFromDiscriminatorValue)?.ToList(); } },
                {"changePasswordId", n => { ChangePasswordId = n.GetStringValue(); } },
                {"changePasswordReason", n => { ChangePasswordReason = n.GetEnumValue<ChangePasswordReason>(); } },
                {"configurableMethods", n => { ConfigurableMethods = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"emailVerificationId", n => { EmailVerificationId = n.GetStringValue(); } },
                {"methods", n => { Methods = n.GetCollectionOfObjectValues<TwoFactorMethod>(TwoFactorMethod.CreateFromDiscriminatorValue)?.ToList(); } },
                {"pendingIdPLinkId", n => { PendingIdPLinkId = n.GetStringValue(); } },
                {"refreshToken", n => { RefreshToken = n.GetStringValue(); } },
                {"refreshTokenId", n => { RefreshTokenId = n.GetGuidValue(); } },
                {"registrationVerificationId", n => { RegistrationVerificationId = n.GetStringValue(); } },
                {"state", n => { State = n.GetObjectValue<LoginResponse_state>(LoginResponse_state.CreateFromDiscriminatorValue); } },
                {"token", n => { Token = n.GetStringValue(); } },
                {"tokenExpirationInstant", n => { TokenExpirationInstant = n.GetLongValue(); } },
                {"trustToken", n => { TrustToken = n.GetStringValue(); } },
                {"twoFactorId", n => { TwoFactorId = n.GetStringValue(); } },
                {"twoFactorTrustId", n => { TwoFactorTrustId = n.GetStringValue(); } },
                {"user", n => { User = n.GetObjectValue<Askaiser.FusionAuth.Client.Models.User>(Askaiser.FusionAuth.Client.Models.User.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<LoginPreventedResponse>("actions", Actions);
            writer.WriteStringValue("changePasswordId", ChangePasswordId);
            writer.WriteEnumValue<ChangePasswordReason>("changePasswordReason", ChangePasswordReason);
            writer.WriteCollectionOfPrimitiveValues<string>("configurableMethods", ConfigurableMethods);
            writer.WriteStringValue("emailVerificationId", EmailVerificationId);
            writer.WriteCollectionOfObjectValues<TwoFactorMethod>("methods", Methods);
            writer.WriteStringValue("pendingIdPLinkId", PendingIdPLinkId);
            writer.WriteStringValue("refreshToken", RefreshToken);
            writer.WriteGuidValue("refreshTokenId", RefreshTokenId);
            writer.WriteStringValue("registrationVerificationId", RegistrationVerificationId);
            writer.WriteObjectValue<LoginResponse_state>("state", State);
            writer.WriteStringValue("token", Token);
            writer.WriteLongValue("tokenExpirationInstant", TokenExpirationInstant);
            writer.WriteStringValue("trustToken", TrustToken);
            writer.WriteStringValue("twoFactorId", TwoFactorId);
            writer.WriteStringValue("twoFactorTrustId", TwoFactorTrustId);
            writer.WriteObjectValue<Askaiser.FusionAuth.Client.Models.User>("user", User);
        }
    }
}
