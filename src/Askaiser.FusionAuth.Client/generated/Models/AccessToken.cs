// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    public class AccessToken : IParsable {
        /// <summary>The access_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessTokenProp { get; set; }
#nullable restore
#else
        public string AccessTokenProp { get; set; }
#endif
        /// <summary>The expires_in property</summary>
        public int? ExpiresIn { get; set; }
        /// <summary>The id_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdToken { get; set; }
#nullable restore
#else
        public string IdToken { get; set; }
#endif
        /// <summary>The refresh_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RefreshToken { get; set; }
#nullable restore
#else
        public string RefreshToken { get; set; }
#endif
        /// <summary>The refresh_token_id property</summary>
        public Guid? RefreshTokenId { get; set; }
        /// <summary>The scope property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Scope { get; set; }
#nullable restore
#else
        public string Scope { get; set; }
#endif
        /// <summary>&lt;ul&gt;  &lt;li&gt;Bearer Token type as defined by &lt;a href=&quot;https:tools.ietf.orghtmlrfc6750&quot;&gt;RFC 6750&lt;a&gt;.&lt;li&gt;  &lt;li&gt;MAC Token type as referenced by &lt;a href=&quot;https:tools.ietf.orghtmlrfc6749&quot;&gt;RFC 6749&lt;a&gt; and  &lt;a href=&quot;https:tools.ietf.orghtmldraft-ietf-oauth-v2-http-mac-05&quot;&gt;  Draft RFC on OAuth 2.0 Message Authentication Code (MAC) Tokens&lt;a&gt;  &lt;li&gt;  &lt;ul&gt;</summary>
        public Askaiser.FusionAuth.Client.Models.TokenType? TokenType { get; set; }
        /// <summary>The userId property</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AccessToken CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AccessToken();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"access_token", n => { AccessTokenProp = n.GetStringValue(); } },
                {"expires_in", n => { ExpiresIn = n.GetIntValue(); } },
                {"id_token", n => { IdToken = n.GetStringValue(); } },
                {"refresh_token", n => { RefreshToken = n.GetStringValue(); } },
                {"refresh_token_id", n => { RefreshTokenId = n.GetGuidValue(); } },
                {"scope", n => { Scope = n.GetStringValue(); } },
                {"token_type", n => { TokenType = n.GetEnumValue<TokenType>(); } },
                {"userId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("access_token", AccessTokenProp);
            writer.WriteIntValue("expires_in", ExpiresIn);
            writer.WriteStringValue("id_token", IdToken);
            writer.WriteStringValue("refresh_token", RefreshToken);
            writer.WriteGuidValue("refresh_token_id", RefreshTokenId);
            writer.WriteStringValue("scope", Scope);
            writer.WriteEnumValue<TokenType>("token_type", TokenType);
            writer.WriteGuidValue("userId", UserId);
        }
    }
}
