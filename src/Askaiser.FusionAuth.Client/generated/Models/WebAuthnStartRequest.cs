// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// API request to start a WebAuthn authentication ceremony
    /// </summary>
    public class WebAuthnStartRequest : IParsable {
        /// <summary>The applicationId property</summary>
        public Guid? ApplicationId { get; set; }
        /// <summary>The credentialId property</summary>
        public Guid? CredentialId { get; set; }
        /// <summary>The loginId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginId { get; set; }
#nullable restore
#else
        public string LoginId { get; set; }
#endif
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WebAuthnStartRequest_state? State { get; set; }
#nullable restore
#else
        public WebAuthnStartRequest_state State { get; set; }
#endif
        /// <summary>The userId property</summary>
        public Guid? UserId { get; set; }
        /// <summary>Identifies the WebAuthn workflow. This will affect the parameters used for credential creation  and request based on the Tenant configuration.</summary>
        public WebAuthnWorkflow? Workflow { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WebAuthnStartRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WebAuthnStartRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"applicationId", n => { ApplicationId = n.GetGuidValue(); } },
                {"credentialId", n => { CredentialId = n.GetGuidValue(); } },
                {"loginId", n => { LoginId = n.GetStringValue(); } },
                {"state", n => { State = n.GetObjectValue<WebAuthnStartRequest_state>(WebAuthnStartRequest_state.CreateFromDiscriminatorValue); } },
                {"userId", n => { UserId = n.GetGuidValue(); } },
                {"workflow", n => { Workflow = n.GetEnumValue<WebAuthnWorkflow>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("applicationId", ApplicationId);
            writer.WriteGuidValue("credentialId", CredentialId);
            writer.WriteStringValue("loginId", LoginId);
            writer.WriteObjectValue<WebAuthnStartRequest_state>("state", State);
            writer.WriteGuidValue("userId", UserId);
            writer.WriteEnumValue<WebAuthnWorkflow>("workflow", Workflow);
        }
    }
}
