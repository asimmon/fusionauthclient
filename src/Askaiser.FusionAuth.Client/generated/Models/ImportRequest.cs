// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Askaiser.FusionAuth.Client.Models {
    /// <summary>
    /// Import request.
    /// </summary>
    public class ImportRequest : IParsable {
        /// <summary>The encryptionScheme property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EncryptionScheme { get; set; }
#nullable restore
#else
        public string EncryptionScheme { get; set; }
#endif
        /// <summary>Information about a user event (login, register, etc) that helps identify the source of the event (location, device type, OS, etc).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Askaiser.FusionAuth.Client.Models.EventInfo? EventInfo { get; set; }
#nullable restore
#else
        public Askaiser.FusionAuth.Client.Models.EventInfo EventInfo { get; set; }
#endif
        /// <summary>The factor property</summary>
        public int? Factor { get; set; }
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<User>? Users { get; set; }
#nullable restore
#else
        public List<User> Users { get; set; }
#endif
        /// <summary>The validateDbConstraints property</summary>
        public bool? ValidateDbConstraints { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ImportRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ImportRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"encryptionScheme", n => { EncryptionScheme = n.GetStringValue(); } },
                {"eventInfo", n => { EventInfo = n.GetObjectValue<Askaiser.FusionAuth.Client.Models.EventInfo>(Askaiser.FusionAuth.Client.Models.EventInfo.CreateFromDiscriminatorValue); } },
                {"factor", n => { Factor = n.GetIntValue(); } },
                {"users", n => { Users = n.GetCollectionOfObjectValues<User>(User.CreateFromDiscriminatorValue)?.ToList(); } },
                {"validateDbConstraints", n => { ValidateDbConstraints = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("encryptionScheme", EncryptionScheme);
            writer.WriteObjectValue<Askaiser.FusionAuth.Client.Models.EventInfo>("eventInfo", EventInfo);
            writer.WriteIntValue("factor", Factor);
            writer.WriteCollectionOfObjectValues<User>("users", Users);
            writer.WriteBoolValue("validateDbConstraints", ValidateDbConstraints);
        }
    }
}
